#!/bin/bash
##
## Copyright 2016 WebMarcIT Ltd
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

## These functions check the layout is correct and provides common initialisation functions
## fn_CheckSetup()
## fn_SetPrefs()
## fn_HouseKeeping()
## fn_GetAnswer()
## fn_Confirm()
## fn_Range()
## fn_RangeTUI()
## fn_CreateFile()
## fn_Mkdir()
## fn_GetResumePoint()
## fn_UpdateResumePoint()
## fn_PressEnter()
## fn_Trap()
## fn_Select()
## fn_IsNumber()
## fn_IsAlreadyRunning()
## fn_CheckLatest()
## fn_PullRelease()
## fn_InstallLatest()
## fn_CheckMaint()
## fn_FileOwner()



# Some global variables for setup functions
typeset str_Answer=      # Used in fn_PressEnter and fn_GetAnswer

fn_CheckSetUp()
{
  typeset b_SetUp=         # Is this the first run

  # This function will check that all Scorch components are set to allow a smooth run.
  typeset local arr_Directories="dir_Pending dir_New dir_Starting dir_Failed dir_Fixing dir_Deleted \
                                 dir_Running dir_Superseded dir_Manual dir_Completed dir_Tmp dir_Plugins \
                                 dir_Queued dir_Active dir_Archived dir_Var dir_Log dir_Lock dir_Etc"
  [[ ${b_Install} ]] && printf "\n\n\tInitialising....\n\n"
  [[ ${b_Install} ]] && fn_Mkdir $(dirname ${file_MOTD}) && fn_CreateFile $file_MOTD

  for p_Variable in ${arr_Directories} ; do
    if [[ ! -d "${!p_Variable}" ]] ; then
      printf "\n\tmkdir -p -m 770 \"${!p_Variable}\"" && b_SetUp=1
      [[ ${b_Install} ]] && fn_Mkdir "${!p_Variable}" && b_SetUp=
    fi
    [[ ${b_InstallForce} ]] && fn_Mkdir "${!p_Variable}" && b_SetUp=
  done

  for p_Variable in ${arr_Directories} ; do
    if [[ ! -w "${!p_Variable}" ]] ; then
      # check if perms or group
      if [[ ! -r "${!p_Variable}" ]] ; then
        printf "\n\tNo write permissions to \"${!p_Variable}\"" && b_SetUp=1
      else
        printf "\n\tNo group access to \"${!p_Variable}\"" && b_SetUp=1
      fi
    fi
  done

  typeset local arr_Files="${file_DispatchLog}"
#  which gawk  2>/dev/null || printf "\n\tgawk not installed. Ubuntu: sudo apt-get install gawk\n"
#  which pgrep 2>/dev/null || printf "\n\tpgrep not installed. Ubuntu: sudo apt-get install pgrep\n"

  if [[ ! ${b_NonInteractive} ]] ; then
    printf "\n\n"
    arr_Commands="gawk pgrep python"
    str_Install="sudo apt-get install"
    set +e
    for str_Command in ${arr_Commands} ; do
      printf "\tChecking for ${str_Command}:\t"
      which ${str_Command} 2>/dev/null
      if [[ $? != 0 ]] ; then 
        printf "not found. ${str_Install} ${str_Command}\n"
        b_SetUp=1 
      fi
    done
    set -e
  fi

  cmd_AWK=$(which gawk 2>/dev/null) || cmd_AWK=$(which nawk 2>/dev/null) || (printf "\n\tCant find a suitable gawk or nawk")
  [[ ${b_NonInteractive} ]] || printf "\n\tcmd_AWK: ${cmd_AWK}\n"

  cmd_TPUT=$(which tput 2>/dev/null) || cmd_TPUT="echo"
  cmd_CLEAR=$(which clear 2>/dev/null) || cmd_CLEAR="echo \"\""
  (( b_NonInteractive == 1 )) && cmd_CLEAR="echo \"\""

#  cmd_CLEAR="echo -e \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\""


  if [[ ${b_SetUp} ]] ; then
    printf "\n\n\n\tThere are missing files, directories, commands or permissions.\n"
    printf "\tTo automatically create required directories, as the framework owner rerun:\n\t\t${dir_Orig}/${str_ProgramName} -install\n"
    sleep 2
    exit 1
  fi

  ps -f > /dev/null
  [[ $? -ne 0 ]] && echo "ps is core dumping. Restart system" && exit 1

  str_JobPrefix="Job_"
}
readonly -f fn_CheckSetUp

fn_SetPrefs()
{
  if [[ ! -f ${file_Prefs} ]] ; then
    fn_CreateFile ${file_Prefs} blank
    echo '
## Permissions options
## ===================
# If the primary group is not the same as the team group set this value (suggested: scorch)
# export str_Group=

## Layout Option
## =============
# Maximum number of jobs to show (useful for screen size preferences. Auto size is 999)
export      int_MaxShown="999"

# Inactivity timeout before returning to previous menu (suggested: 20)
export       int_Refresh="20"

# Number of log lines to show from the bottom of the log file (suggested: 25)
export          int_Tail="25"

# Editor to use when viewing log files, scorch jobs and the preferences file (suggested: vi)
export        cmd_Editor="vi"

# Allow quick menu options (suggested value for novice=0 expert=1)
export           b_Quick="0"

# Set Protocol for installing new version (http or local)
export      str_Protocol="http"

# Set Location of version and tar file for HTTP
export      dir_Location="www.autoscorch.com/downloads/"
export      file_Version="version.txt"

' >> ${file_Prefs}
  fi
  source ${file_Prefs}
  if [ ! -z ${str_Group} ] ; then
    if ! grep -q "${str_Group}:" /etc/group ; then
      echo "str_Group set to ${str_Group} but does not exist."
      echo "Reset to black"
      str_Group=
    fi
  fi
  if [[ ! -z ${str_Group} ]] ; then
    # Check str_Group is ont of groups
    if [[ "$(groups)" =~ "${str_Group}" ]] ; then
      :
    else
      printf "\n\n Error: ${str_ProgramName} is using a group account of ${str_Group} but you are not a member.\n"
      printf "\n Your available groups are:\n "
      groups
      printf "\n\n Check with ${str_ProgramName} administrator, or a system administrator. Or change your scorch.prefs file\n"
      exit 1
    fi
  fi
}
readonly -f fn_SetPrefs

fn_HouseKeeping()
{
  # Clean-up of dir_deleted dir_completed
  # Deleted jobs left for a period of time before tar into the deleted tar
  # Daily jobs moved to archive directory after a period of if more than MaxJobs
  # Old Archived jobs are tar'd up after DaysDeleted
  echo "Housekeeping...."

  typeset local     int_MaxJobs=${int_MaxShown}
  typeset local int_DaysDeleted=10
  typeset local  int_DaysActive=30

  # Need to add one for the head/tail to be valid
  (( int_MaxJobs +=1 ))

  # First remove max links from completed
  SAVEIFS=$IFS
  IFS=$(echo -en "\n\b")

  [ $(ls "${dir_Completed}/*" 2> /dev/null | wc -l ) -ge ${int_MaxJobs} ] && find -L "${dir_Completed}/*" ! -newer "${dir_Completed}/$(ls -1t ${dir_Completed} | head -${int_MaxJobs} | tail -1)" -exec mv -f {} ${dir_Archived}/. \; > /dev/null 2>&1

  # Remove old completed links
  find -L -H "${dir_Completed}"/${str_JobPrefix}* -mtime +${int_DaysDeleted} -exec echo {} \; 2>/dev/null
  find -L "${dir_Completed}"/${str_JobPrefix}* -mtime +${int_DaysDeleted} -exec rm -f {} \; 2>/dev/null

  # Remove old deleted links
  find -L "${dir_Deleted}"/${str_JobPrefix}* -mtime +${int_DaysDeleted} -exec rm -f {} \; 2>/dev/null

  # Archive old active jobs
  ( cd "${dir_Active}" && find -L ./${str_JobPrefix}*  -mtime +${int_DaysActive} -exec tar uf "${dir_Archived}/archived.tar" "{}" + 2>/dev/null )
  find -L "${dir_Active}/${str_JobPrefix}*"  -mtime +${int_DaysActive} -exec rm -f {} \; 2>/dev/null

  [[ -w ${file_Cache} ]] && rm ${file_Cache}

  # Touch active New etc jobs (Sometimes old jobs are still being used even after a long time)
  # Recover jobs jobs that are taking a long time to progress
  #(cd ${dir_Active} && find "${dir_Completed}" "${dir_New}" -type f -exec tar xf ${dir_Active}/active.tar "{}" + )
  arr_Recover=$( cd "${dir_New}" && find -L . -name "${str_JobPrefix}*" -mtime +${int_DaysActive} )
  [[ ! -z ${arr_Recover} ]] && echo "Some jobs are taking a long time to be processed: ${arr_Recover}"
  for file_Recover in ${arr_Recover} ; do
    ( cd "${dir_Active}" && tar xf "${dir_Archived}/archived.tar" ${file_Recover} )
  done

  IFS=Â£{SAVEIFS}
  # Clean Up cache files
  find -L "${dir_Tmp}" -name "cache.$$.*"  -exec rm -f {} \; 2>/dev/null
  find -L "${dir_Tmp}" -name "scorch.$$.*" -exec rm -f {} \; 2>/dev/null
}
readonly -f fn_HouseKeeping

fn_GetAnswer()
{
  # Library function to get an answer or range of answers
  # =====================================================
  typeset local b_Range=${1:-""}

  printf "\n e${dis_ULOn}X${dis_ULOff}it.\n\n"
  printf " Enter choice "
  [[ "${b_Range}" ]] && printf "(range enabled : i.e 1-3,7,8)"
  printf ": "
  read -e str_Answer
  str_Answer=${str_Answer:-"x"}
}
readonly -f fn_GetAnswer

fn_Confirm()
{
  # Linrary function to get a Yes No answer
  # =======================================
  local chr_YN

  printf "\n $1. Are you sure (y/n) [n]? "
  read -e chr_YN
  
  case $chr_YN in
    y | Y )  return 0 ;;
    *     )  return 1 ;;
  esac
}
readonly -f fn_Confirm

fn_Range()
{
  # Library function to turn a range of numbers into a list
  # =======================================================

  typeset local str_Input=${1//,/ }

  for int_EachItem in ${str_Input} ; do
    if [ "$(echo ${int_EachItem} | grep "-" )" ] ; then
      # Bash 3 varient
      # typeset local int_First=$(echo ${int_EachItem} | cut -d "-" -f1)
      # typeset local  int_Last=$(echo ${int_EachItem} | cut -d "-" -f2)
      typeset local  int_First=${int_EachItem%%-*}
      typeset local int_Last=${int_EachItem#*-}

      if [ ${int_First} -le ${int_Last} ] ; then
        while [[ ${int_First} -le ${int_Last} ]] ; do
          printf "${int_First} "
          ((int_First+=1))
        done
      else
        while [[ ${int_First} -ge ${int_Last} ]] ; do
          printf "${int_First} "
          ((int_First-=1))
        done
      fi
    else
      printf  "${int_EachItem} "
    fi
  done
}
readonly -f fn_Range

fn_RangeTUI()
{
  # arr_List="a b c d e f g"
  # fn_RangeTUI "${arr_List}" "$(fn_Range "1,3,5,7")"
  # fn_RangeTUI "${arr_List}" "$(fn_Range "1-4,7")"
  typeset local arr_Input=${1}
  typeset local arr_Range=${2:-0}
  typeset local int_Count=0
  for each_Input in ${arr_Input} ; do
    (( int_Count++ ))
    [[ "$(echo ${arr_Range} | grep -w ${int_Count})" ]] && c_Selected=">" || c_Selected=" "
    echo "[${c_Selected}] ${each_Input}"
  done
}

fn_CreateFile()
{
  typeset local file_Name="${1}"
  typeset local b_Blank="${2:-""}"
  touch "${file_Name}"
  [[ $? -ne 0 ]] && echo "Error: Cannot create file ${file_Name}" && exit 1
  chmod 660 "${file_Name}" 2>/dev/null
  [[ "${b_Blank}" ]] && > "${file_Name}"
  if [[ ! -z ${str_Group} ]] ; then
    chgrp ${str_Group} ${file_Name} 2>/dev/null
  fi
}
readonly -f fn_CreateFile

fn_Mkdir()
{
  typeset local dir_Name="${1}"

  mkdir -p -m 770 "${dir_Name}" #2>/dev/null
  if [[ ! -z ${str_Group} ]] ; then
    chgrp ${str_Group} ${dir_Name} 2>/dev/null
  fi
}
readonly -f fn_Mkdir

fn_GetResumePoint()
{
  typeset local file_Log="${1}"
  tail -500 "${file_Log}" | grep "Resume point:" | tail -1 | ${cmd_AWK} -F":" '{print $NF}'
}
readonly -f fn_GetResumePoint

fn_UpdateResumePoint()
{
  # Updates the "ACTIVE" job 
  typeset local file_Job="${1}"                             # The Job to update
  typeset local int_ResumePoint="${2:-0}"                   # The new start task
  typeset local file_Log="${dir_Log}/$(basename ${file_Job})".log
  #(( int_ResumePoint+=0 ))                                  # Just in case a string number has been passed
  fn_CreateFile "${file_Job}"
  fn_CreateFile "${file_Job}".tmp blank
  sed s/^int_ResumePoint=.*/int_ResumePoint=${int_ResumePoint}/ "${file_Job}" > "${file_Job}".tmp
  [[ "$(grep ^int_ResumePoint "${file_Job}".tmp)" ]] && cp "${file_Job}".tmp "${file_Job}" ; rm "${file_Job}".tmp 2>/dev/null
  [[ int_ResumePoint -eq 0 ]] && echo "$(${fn_LogDate}) Starting from task 0" >> "${file_Log}" || echo "$(${fn_LogDate}) Resuming from task ${int_ResumePoint}" >> "${file_Log}"
}
readonly -f fn_UpdateResumePoint

fn_PressEnter()
{
  if [[ !  "${b_NonInteractive}" ]] ; then
    printf "\n\n"
    read -n 1 -p " Press any key to continue"
  else
    printf "\nNon Interactive Mode - pressed any key to continue\n"
  fi
}
readonly -f fn_PressEnter

fn_Trap()
{
  fn_CreateFile "${file_ProgLog}"
  echo "${fn_LogDate} ${1}" >> "${file_ProgLog}"
  fn_HouseKeeping
  exit 1
}
trap "fn_Trap \"TERMINATED: User ${str_User} probably logged out \"" 1
trap "fn_Trap \"TERMINATED: User ${str_User} probably ctrl-c \"" 2
trap "fn_Trap \"TERMINATED: Probably via kill \"" 15
readonly -f fn_Trap

fn_Select()
{
  typeset -a arr_Temp=
}
readonly -f fn_Select

fn_IsNumber()
{
  local str_Integer=${1:-""}
  re='^-?[0-9]+([.][0-9]+)?$'
  if [[ ${str_Integer} =~ $re ]] ; then
    return 0
  else
    return 1
  fi
}
readonly -f fn_IsNumber

fn_IsAlreadyRunning()
{
  local str_Process="${1:-""}"
  if [[ ! -z ${str_Process} ]] ; then
    ps -fu ${str_User} | grep -v grep | grep -s "${str_Process}" && return 0 || return 1
  else
    ps -fu ${str_User}
    return 1
  fi
}
readonly -f fn_IsAlreadyRunning

fn_CheckLatest()
{
  echo ""
  if [[ "${str_Protocol}" == "http" ]] ; then
    printf "\n\n Checking ${str_Protocol}://${dir_Location}/${file_Version}\n"
    str_LatestVersion=$(curl ${str_Protocol}://${dir_Location}/${file_Version})
    if fn_IsNumber ${str_LatestVersion} ; then
    #if [[ $? == 0 ]] ; then
      echo "$str_LatestVersion"
    else
      printf "\n\n"
      printf " Latest version <${str_LatestVersion}> may not have be released.\n"
      #printf " curl ${str_Protocol}://${dir_Location}/${file_Version}\n"
      #curl ${str_Protocol}://${dir_Location}/${file_Version}
      #str_LatestVersion="check"
      fn_PressEnter
    fi
    file_Latest="${str_Protocol}://${dir_Location}/escorch.${str_LatestVersion}.tar"
  else
    str_LatestVersion=$(grep -a "^typeset str_ProgramVersion=" scorch.tar | cut -d"=" -f2 | head -1 )
  fi
}
readonly -f fn_CheckLatest

fn_Plugins()
{
  echo ""
  if [[ "${str_Protocol}" == "http" ]] ; then
    printf "\n\nChecking available plugins ${str_Protocol}://${dir_URLPlugins}\n"
    str_Plugins="$(curl ${str_Protocol}://${dir_Location}/${file_Plugins})"
  fi
  printf "\n\n"
  for each_Plugin in ${str_Plugins} ; do
    printf "\t[ ] ${each_Plugin}\n"
  done
 sleep 5
}
readonly -f fn_Plugins

fn_PullRelease()
{
  # Pull the release file from source
  printf " Pulling release\n"
  printf " ===============\n"
  printf " Retrieving MD5      (${file_Latest}.md5.txt): "
  fn_CreateFile ${file_MD5}
  str_Ouput=$(curl -s -o ${file_MD5} ${file_Latest}.md5.txt)
  if [[ $? == 0 ]]  ; then
    echo "OK"
    echo "$(cat ${file_MD5} | cut -d" " -f1 ) scorch.tar" > ${file_MD5}
  else
    echo "Error"
    echo ${str_Ouput}
    fn_PressEnter
    return 1
  fi

  #str_MD5=${str_MD5% *}

  printf " Retrieving tar file (${file_Latest}): "
  cd ${dir_Base}
  str_Ouput=$(curl -s -o ${file_Tar} ${file_Latest})
  if [[ $? == 0 ]] ; then
    echo "OK"
  else
    echo "Error"
    echo ${str_Ouput}
    fn_PressEnter
    return 1
  fi

  printf " Verifying MD5       (${file_MD5}): "
  md5sum -c ${file_MD5}
  
  if [[ $? == 0 ]] ; then
    :
  else
    printf "\n Problem verifying file.\n"
    head ${file_MD5}
    printf "\n Check network connection, disk space."
    fn_PressEnter
  fi
}
readonly -f fn_PullRelease

fn_InstallLatest()
{
  local file_Install=${dir_Etc}/install.txt
  local     file_MD5=${dir_Base}/scorch.tar.md5
  local     file_Tar=${dir_Base}/scorch.tar
  local   dir_Backup=${dir_Base}/.${str_ProgramVersion}.backup

  printf "\n Protocol: $str_Protocol\n\n"
  # if protocol is http then pull release
  if [[ "${str_Protocol}" == "http" ]] ; then 
    URL="http://${dir_Location}"
    fn_PullRelease
  else
    echo " Using local install method (${file_Tar})"
    ls -l ${file_Tar}
  fi

  #printf " Checking for MD5   : "
  # curl -s -o ${file_MD5} ${file_Latest}.md5.txt
  #echo "$(cat ${file_MD5} | cut -d" " -f1 ) scorch.tar" > ${file_MD5}
  #cat ${file_MD5}
  

  #str_MD5=${str_MD5% *}

  #printf " Retrieving tar file:\n"
  #cd ${dir_Base}
  #echo ""
  #curl -# -o ${file_Tar} ${file_Latest} && echo " Done" || echo " FAILED"

  #printf " Verifying MD5      : "
  
  if [[ ! -f ${file_Install} ]] ; then
    fn_CreateFile ${file_Install}
    chmod 770 ${file_Install}
    if [[ ! -w ${file_Install} ]] ; then
      printf " Error: Cannot write to install file ${file_Install}\n"
      printf " Install aborted\n"
      fn_PressEnter
      return 1
    fi
  fi

  # Checking files modified since last install..

  lst_Changed=$(find -L ${dir_Functions} ${dir_Python} ${dir_Plugins} -type f -newer ${dir_Etc}/install.txt)
  if [[ ! -z $lst_Changed ]] || [[ $(find -L ${dir_Base} -name ${str_ProgramName} -type f -newer ${file_Install}) ]] ; then
    fn_Mkdir ${dir_Backup}
    printf "\n\n"
    printf " Warning: Found files that have been modified\n"
    printf " ============================================\n"
    printf " Backup directory: ${dir_Backup}\n"
    printf " (y/n response required for each file)\n${lst_Changed}\n\n"
    find -L ${dir_Functions} ${dir_Python} ${dir_Plugins} -type f -newer ${file_Install} -okdir cp {} ${dir_Backup}/. \;
    find -L ${dir_Base} -name ${str_ProgramName} -type f -newer ${file_Install} -okdir cp {} ${dir_Backup}/. \;
  else
    printf "\n\n No modifed files found\n"
  fi

  printf "\n\n"
  printf " Extracting files\n"
  printf " ================\n"
  tar oxvf ${file_Tar}

  if [[ $? == 0 ]] ; then
    fn_CreateFile ${file_Install}
    echo "${str_LatestVersion} $(${fn_LogDate}) ${str_User}" >> ${file_Install}
  fi
 # else
 #   echo " Problem verifying file."
 #   cat ${file_MD5}
 #   echo " Check network connection, disk space."
 # fi
  printf "\n"
  printf " Lastest installs\n"
  printf " ================\n" 
  tail -5 ${file_Install}
  fn_PressEnter
}
readonly -f fn_InstallLatest

fn_Repair()
{
  local file_Install=${dir_Etc}/install.txt

  # 93 - Fix perms and group settings for extracted file
  echo "str_Group=$str_Group"
  tar tvf ${file_Install}
  ls -lH $dir_Orig
  file $dir_Orig/*
  echo "and bin"
  ls -lH $dir_Orig/bin
  fn_PressEnter
}
readonly -f fn_Repair

fn_CheckMaint()
{
  if [[ -L ${file_Maint} ]] ; then
    echo ""
    echo "Maintenance mode - all dispatchers and manager sessions will be suspended"
    echo "To reinstate ${str_ProgramName} remove maintenance file"
    echo "  rm ${file_Maint}"
    exit 1
  else
    :
    #echo "OK no ${file_Maint}"
  fi
}
readonly -f fn_CheckMaint

fn_FileOwner()
{
  # Takes an argument of a filename (or dirname) and return the owner
  local file_Name=$1
  [[ -r ${file_Name} ]] && ls -ld ${file_Name} | awk -F" " '{print $3}' || echo "unknown"
}
readonly -f fn_FileOwner