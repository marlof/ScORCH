#!/bin/bash
# Copyright 2016 WebMarcIT Ltd
#
# Unauthorised copying of this file, via any medium is strictly prohibited
# This is the proprietary software of WebMarcIT Ltd
# Written by marc@webmarcit.com
# shellcheck disable=SC2034
# shellcheck disable=SC2086
# shellcheck disable=SC2129
# shellcheck disable=SC2140
# shellcheck disable=SC2154

## fn_GetRequest()
## fn_ProcessRequest()
## fn_ShowRules()
## fnE_Rules()
## fnE_RulesMenu()
## fnE_AmendRules()
## fn_ExtractPairs()
## fn_CheckAuth()
fn_NiceTime()
{
  local hours=
  local minutes=
  local seconds=
  local time=
  time=${1%.*}
  ((hours=${time}/3600))
  ((minutes=${time}%3600/60))
  ((seconds=${time}%60))
  printf "%02dh %02dm %02ds\n" $hours $minutes $seconds
}

fn_GetRequest()
{
  ## Receive the request from a file or interactively
  typeset local file_Template="${1:-}"
  typeset local str_Line=""
  typeset local int_GetCount=1

  ## global tmp file
  file_Request=${dir_Tmp}/${str_ProgramName}.$$.${int_GetCount}
  fn_CreateFile "${file_Request}"

  if [ ! -z "${file_Template}" ] ; then
    [[ $b_NonInteractive ]] || echo "$($fn_LogDate): Processing file:${file_Template}"
    while read -r str_Line ; do
      str_ULine=$(echo "${str_Line}" | tr '[:lower:]' '[:upper:]')
      [[ ${str_ULine} =~ ACTION ]] &&  (( int_GetCount+=1 )) && file_Request=${dir_Tmp}/${str_ProgramName}.$$.${int_GetCount}
      echo "${str_Line}" | grep ":" >> "${file_Request}"
    done < "${file_Template}"
  else
    printf "\n help <plugin>    at any time for additional parameters\n"
    printf " info <plugin>    for further information\n\n"
    printf " Please enter the request below.\n To complete the request is use a fullstop on a newline:\n (To quit type CANCEL)\n\n"
    while [[ "${str_Line}" != "." ]] ; do
      read -e -r str_Line
      str_ULine=$(echo "${str_Line}" | tr '[:lower:]' '[:upper:]')
      if [[  ${str_ULine} =~ HELP ]] ; then
        local str_Help=${str_Line#help }
        if [[ "${str_Line}" ]] ; then
          echo "==SYSTEM============="
          declare -f fn_ExtractPairs | grep -w "GetVar"
          echo "==CUSTOM============="
          declare -f "SP_${str_Help}" | grep -w "GetVar"
          echo "==============="
        fi
      elif [[ ${str_ULine} =~ INFO ]]; then
        local str_Info=${str_Line#info }
        # scorchdb -f $file_CSV +job $str_Info -time | ${cmd_AWK} '{ sum += $1 } END { if (NR > 0) print sum / NR }'
        local int_JobCount=
        int_JobCount=$(grep "\_$str_Info\_" $file_CSV | wc -l)
        local int_NonFailCount
        int_NonFailCount=$(grep "\_${str_Info}\_" $file_CSV | cut -d"," -f8 | grep -v "\-1$" |  ${cmd_AWK} '{ sum += $1 } END { if (NR > 0) print sum / NR }')
        local int_FailCount=
        int_FailCount=$(grep "\_${str_Info}\_" $file_CSV | cut -d"," -f8 | grep "\-1$" | wc -l)
        printf "\n"
        printf "Total number of jobs logged    : %s\n" ${int_JobCount}
        if [[ ${int_JobCount} -ge 1 ]] ; then
          #printf "Total number of failures       : $(grep $str_Info $file_CSV | cut -d"," -f6)"
          printf "Number of deleted jobs         : %s\n" ${int_FailCount}
          printf "Average number of  failures    : %s\n" ${int_NonFailCount}
          printf "Max run time                   : %s %s %s\n" $(fn_NiceTime $(grep "\_${str_Info}\_" $file_CSV | grep -v "\-1,.*$" | cut -d"," -f6 |  ${cmd_AWK} 'BEGIN { max=$1 } { if ($1 > max) max=$1} END {print max}'))
          printf "Average run time               : %s %s %s\n" $(fn_NiceTime $(grep "\_${str_Info}\_" $file_CSV | cut -d"," -f6 |  ${cmd_AWK} '{ sum += $1 } END { if (NR > 0) print sum / NR }') 2>/dev/null)
          printf "\n\n"
          printf "\n help <plugin>    at any time for additional parameters\n"
          printf " info <plugin>    for further information\n\n"
          printf " Please enter the request below.\n To complete the request is use a fullstop on a newline:\n (To quit type CANCEL)\n\n"
        fi
      else
        [[ ${str_ULine} =~ CANCEL ]] && rm "${dir_Tmp}/${str_ProgramName}.$$."[0-9]* && break
        [[ ${str_ULine} =~ ACTION ]] &&  (( int_GetCount+=1 )) && file_Request="${dir_Tmp}/${str_ProgramName}.$$.${int_GetCount}"
        echo "${str_Line}" | grep ":" >> "${file_Request}"
      fi
    done
  fi
}
readonly -f fn_GetRequest

fn_ProcessRequest()
{
  local int_JobCount=1
  local int_FileCount=1

  int_JobID=$(fn_GetJobID)

  for str_EachFile in ${dir_Tmp}/${str_ProgramName}.$$.* ; do
    [[ -e ${str_EachFile} ]] || break
    file_Request=${dir_Tmp}/${str_ProgramName}.$$.${int_FileCount}
    #echo "${str_EachFile}"

    fn_ExtractPairs

    for ACTION in ${ACTION_LIST} ; do

      for ENVIRONMENT in ${ENVIRONMENT_LIST} ; do
        fn_Call="no-action"
        int_TaskCount=0
        if type -t "SP_${ACTION}" >/dev/null ; then
          fn_Call="SP_${ACTION}"
        else
          printf "\n\nCannot find a function called SP_%s\n# Maybe issue107: or ${fn_Call}\n" "${ACTION}"
          ACTION="no-action"
          fn_PressEnter
          return 0
        fi
        str_Call=${fn_Call#SP_}
        [[ ! -z "${LABEL}" ]]  && str_Label="${LABEL}" || str_Label="${ACTION}"
        file_Job="${dir_New}"/${str_JobPrefix}${TICKET}_${int_JobID}.${str_Label}.${int_JobCount}_${str_Call}_${ENVIRONMENT}_${RELEASE}
        fn_CreateFile "${dir_Log}"/"$(basename "${file_Job}").log"

        if [[ ! -z "${PARENT_LIST}" ]] ; then
          for str_EachRule in ${PARENT_LIST} ; do
            echo "PARENT:${str_JobPrefix}${TICKET}_${int_JobID}.${str_EachRule}.*" >> "${dir_Active}/$(basename "${file_Job}")".rules
          done
        fi
        fn_JobHeader "${file_Job}"
        Task "echo AUDIT:START:\${str_StartTime}"
        printf "\t${fn_Call}: "




        set +u 
          ${fn_Call}
          int_ReturnCode=${PIPESTATUS[0]}
        set -u

        # PIPESTATUS AND USE PIPE TEE
        if [[ ${int_ReturnCode} -ne 0 ]] ; then
          echo "exit 1" >> "${file_Job}"
          echo "# Template Begin" >> "${file_Job}"
          cat "${file_Request}" >> "${file_Job}"
          echo "# Template End" >> "${file_Job}"
          echo "$(${fn_LogDate}) Error in plugin. Task creation not complete" >> "${dir_Log}"/"$(basename "${file_Job}").log"
          mv "${file_Job}" "${dir_Failed}"/.
          fn_PressEnter
          return 1
        fi
        printf "\t\t%s tasks added\n" $((int_TaskCount -1 ))

        if [[ ${b_CreateFailed} ]] ; then
          mv "${file_Job}" "${dir_Failed}/."
          echo "$(${fn_LogDate}) Failed to create job for user ${str_User}. Check log for reason." >> "${dir_Log}"/"$(basename "${file_Job}").log"
        else
          fn_JobFooter "${file_Job}"
          chmod 770 "${file_Job}"
          echo "$(${fn_LogDate}) Created by:${str_User} Tasks[${int_TaskCount}]" >> "${dir_Log}"/"$(basename "${file_Job}").log"
        fi

        (( int_JobCount+=1 ))
        b_StartGroupAdded=

        if [[ $(ls "${dir_Failed}"/"${str_JobPrefix}*_${ACTION}_${ENVIRONMENT}*" 2>/dev/null)  ]] ; then
          mv "${dir_Failed}"/"${str_JobPrefix}*_${ACTION}_${ENVIRONMENT}*" "${dir_Superseded}"/.
        fi
        if [[ ${b_Start} ]] ; then
          #nohup "${dir_Base}"/${str_ProgramName} -background -j ${dir_Job} </dev/null >> "${file_ProgLog}" &
          if [[ ${b_Sync} ]] ; then
            mv "${file_Job}" "${dir_Queued}/." 
            "${file_EachJob}" </dev/null >> "${dir_Log}"/"$(basename "${file_EachJob}").log" 2>&1 
          else
            mv "${file_Job}" "${dir_Queued}/." && "${dir_Base}/${str_ProgramName}" -background &
          fi
        fi

      done
    done
    (( int_FileCount++ ))
    rm "${file_Request}"
  done
}
readonly -f fn_ProcessRequest

fn_ShowRules()
{
  ## typeset local file_Job="${1}"
  echo ""
  [[ -r "${file_ActiveJob}.rules" ]] && ( fn_ShowLine "-" "Rules" ; cat "${file_ActiveJob}.rules" ; echo "" )
  :
}
readonly -f fn_ShowRules

fnE_Rules()
{
  fn_PressEnter
}
readonly -f fnE_Rules

fnE_RulesMenu()
{
  ## printf "\n\n Rules menu "
  printf " %sA%smend rules |" "${dis_ULOn}" "${dis_ULOff}"
}
readonly -f fnE_RulesMenu

fnE_AmendRules()
{
  fn_ShowTop
  fn_ShowLine "-" "File details"
  echo ""
  ls -lL "${file_ActiveJob}"
  ls -lL "${file_Log}"
  echo ""
  fn_ShowRules
  fn_ShowLine "-"

  printf "\n\n "
  printf " %sA%sdd parent | %sD%selete rules  | e%sX%sit : " "${dis_ULOn}" "${dis_ULOff}" "${dis_ULOn}" "${dis_ULOff}" "${dis_ULOn}" "${dis_ULOff}"

  read -r ${str_Quick} -t 60 char_Choice
  set +e
  case ${char_Choice} in

          a | A ) fn_ShowJobs manual failed running starting pending queued new
                  #fn_ShowJobs2 manual failed running starting pending queued new
                  fn_ShowLine
                  fn_GetAnswer
                  [[ "$str_Answer" == "x" ]] || [[ "${str_Answer}" == "" ]] && return 0
                  echo "PARENT:${arr_Jobs[${str_Answer}]}" >> "${file_ActiveJob}.rules" ;;

          d | D ) rm "${file_ActiveJob}.rules" 2>/dev/null
                  # if link to active job in pending mv job to queued
                           ;;

          ## Edit job
          x | X ) return 0 ;;
          *     ) return 0 ;;
  esac
  set -e

}
readonly -f fnE_AmendRules

fn_ExtractPairs()
{
  GetVar -pattern "From"     -name FROM
  GetVar -pattern "Sent"     -name SENT
  GetVar -pattern "Action"   -name ACTION_LIST      -list
  GetVar -pattern "Release"  -name RELEASE                -default ""
  GetVar -pattern "Enviro"   -name ENVIRONMENT_LIST -list -default "NA"
  GetVar -pattern "Type"     -name TYPE                   -default ""
  GetVar -pattern "Ticket"   -name TICKET                 -default "ID-${int_JobID}"
  GetVar -pattern "Timeout"  -name TIMEOUT                -default ""
  GetVar -pattern "Schedule" -name SCHEDULE               -default ""

  GetVar -pattern "Label"  -name LABEL                   -default ""
  GetVar -pattern "Parent" -name PARENT_LIST -list       -default ""
}
readonly -f fn_ExtractPairs

fn_CheckAuth()
{
  ## This function is stubbed for future enhancements
  ## The idea is that users will need to be allowed to use scorch as a reporting tool
  ## or be allowed access to certain systems/plugin directories

  ##  #Username  : [ F|FULL R|RESTRICTED P|POWER ] : [ all | <comma separated list of plugin dirs>]
  ##     marc:POWER:all
  ##     root::all
  ##     user::DEMO
  file_Users=${dir_Etc}/users


  if [[ ${b_Install} ]] ; then
    fn_CreateFile "$file_Users"
    printf "\n\n\tInitialising....\n\n"
    [ ! -s "${file_Users}" ] && echo "${str_User}:POWER:ALL" > "${file_Users}"
  fi

  printf "\nChecking authority: "
  if [ ! -r "${file_Users}" ] ; then
    if [ -f "${file_Users}" ] ; then
      echo "The file ${file_Users} is not readable."
      ls -l "${file_Users}"
      exit 1
    else
      echo "The users file does not exist. Create the users file ${file_Users}"
      exit 1
    fi
  fi
  set +e
  grep "^${str_User}:" "${file_Users}"
  str_Authority=$(grep "^${str_User}:" "${file_Users}" | cut -d":" -f2 | tr '[:lower:]' '[:upper:]')
  case ${str_Authority} in
    P | POWER ) b_Power=1      ; str_Authority="Power User" ;;
    R | REST* ) b_Restricted=1 ; str_Authority="View Only"  ;;
    F | FULL  )                  str_Authority="Normal"     ;;
    *         ) printf "\n%s: Authority Level not set correctly.\nCheck with the %s administrator.\n" "${str_Authority}" "${str_ProgramName}" ; exit 1 ;;
  esac
  set -e
}
readonly -f fn_CheckAuth
