#!/bin/bash
##
## Copyright 2016 WebMarcIT Ltd
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

## This file contains functions to set and display layout
## fn_Dispatcher()        Runs the dispatcher in a while loop for a number of attempts
## fn_CheckRunning()      Looks at ruuning jobs and makes sure they are still running (Only the Dispatch host should do this)
## fn_IsDispatchHost()    Checks if the host is the Dispatch host
## fn_CheckDispatcher()   Checks that the lock file matches the process of the dispatcher (Only yhe Dispatch host should do this)
## fn_RunJobs()           Each sessions will check for owned jobs in the run state to start
## fn_LockManager()
# shellcheck disable=SC2016
# shellcheck disable=SC2154
# shellcheck disable=SC2162



fn_Dispatcher()
{
  local int_DispatchCount=0
  local arr_PendingJobs
  local arr_QueuedJobs

  while [ "${int_DispatchCount}" -lt "${int_DispatchMax}" ]; do
    fn_CheckMaint

    # Ensure job directories exist
    if [[ ! -d "${dir_Pending}" || ! -d "${dir_Running}" || ! -d "${dir_Queued}" ]]; then
      exit 1
    fi

    # Process pending jobs
    arr_PendingJobs=($(ls -rt1 "${dir_Pending}" 2>/dev/null))
    for file_EachJob in "${arr_PendingJobs[@]}"; do
      echo "Checking rules for ${file_EachJob}"
      local rule_file="${dir_Active}/$(basename "${file_EachJob}").rules"
      if [[ -r "${rule_file}" ]]; then
        fn_ProcessJobRules "${file_EachJob}" "${rule_file}"
      fi
    done

    # Reset dispatch count if there were pending jobs
    if [[ ${#arr_PendingJobs[@]} -gt 0 ]]; then
      int_DispatchCount=0
    fi

    # Process queued jobs
    arr_QueuedJobs=($(ls -rt1 "${dir_Queued}" 2>/dev/null))
    for file_EachJob in "${arr_QueuedJobs[@]}"; do
      fn_MoveJobToStarting "${file_EachJob}"
      sleep 1
    done

    (( int_DispatchCount = int_DispatchCount + 1 ))
    touch -h "${file_DispatchLock}" 2>/dev/null || fn_CheckDispatcher
    sleep "${int_DispatchSleep}"
    fn_CheckRunning
  done

  rm -f "${file_DispatchLock}"
  int_DispatcherPID=0
  exit 0
}
readonly -f fn_Dispatcher

fn_ProcessJobRules() {
  local file_EachJob=$1
  local rule_file=$2
  local arr_Parents=($(grep "PARENT:" "${rule_file}" | cut -d: -f2))
  local b_ParentComplete=0

  for file_EachParent in "${arr_Parents[@]}"; do
    if [[ "${file_EachParent}" == "${file_EachJob}" ]]; then
      fn_Audit "${file_EachJob}" "Cyclic dependency. Failing job" "rules"
      mv "${dir_Pending}/${file_EachJob}" "${dir_Failed}"
      return
    fi

    local parent_path
    parent_path=$(find -L "${dir_Job}" -name "${file_EachParent}" | grep -v "/active/")
    local str_ParentState=$(basename "$(dirname "${parent_path}")")

    case ${str_ParentState} in
      completed) fn_Audit "${file_EachJob}" "Parent job ${file_EachParent} completed." "rules" ;;
      superseded | failed) b_ParentComplete=1 ;;
      running | starting | pending | queued | new) b_ParentComplete=1 ;;
      *) 
        fn_Audit "${file_EachJob}" "RULES: Parent job ${file_EachParent} missing. Moving job to failed state." "rules"
        b_ParentComplete=1
        mv "${dir_Pending}/${file_EachJob}" "${dir_Failed}" ;;
    esac
  done

  if [[ "${b_ParentComplete}" == 0 ]]; then
    fn_Audit "${file_EachJob}" "All parent jobs completed. Moving job to queued state." "rules"
    mv "${dir_Pending}/${file_EachJob}" "${dir_Queued}"
  fi
}

fn_MoveJobToStarting() {
  local file_EachJob=$1
  local str_QueueLock
  local file_QueueLock

  str_QueueLock=$(echo "${file_EachJob}" | ${cmd_AWK} -F"_" '{print $4"_"$5}')
  file_QueueLock="${file_JobLock}.${str_QueueLock}"

  if [ ! -L "${file_QueueLock}" ]; then
    ln -s "${file_EachJob}" "${file_QueueLock}"
    echo "$(${fn_LogDate}) Dispatch: ${file_EachJob}" >> "${file_DispatchLog}"
    mv "${dir_Queued}/${file_EachJob}" "${dir_Starting}"
    int_DispatchCount=0
  else
    fn_CleanupJobLocks
  fi
}

fn_CleanupJobLocks() {
  local arr_JobLocks=($(ls "${file_JobLock}"* 2>/dev/null))
  for file_EachLock in "${arr_JobLocks[@]}"; do
    if [[ ! "$(find -L "${dir_Job}/running" "${dir_Job}/starting" -name "$(ls -l "${file_EachLock}" | ${cmd_AWK} -F" " '{print $NF}')")" ]]; then
      rm "${file_EachLock}"
    fi
  done
}



fn_CheckRunning()
{
  fn_IsDispatchHost || return 0

  # Check if there are running jobs and handle orphaned jobs
  local arr_RunningJobs
  arr_RunningJobs=$(ls -t1 "${dir_Running}" | grep -v "pause$" 2>/dev/null) || :
  for file_EachJob in ${arr_RunningJobs} ; do
    if ! ps -ef | grep -q "[${file_EachJob:0:1}]${file_EachJob:1}"; then
      mv "${dir_Running}/${file_EachJob}" "${dir_Failed}/."
      echo "$(${fn_LogDate}) Orphaned. Resume point:unknown" | tee -a "${dir_Active}/${file_EachJob}" "${dir_Log}/${file_EachJob}.log"
    fi
  done
}
readonly -f fn_CheckRunning


fn_IsDispatchHost()
{
  str_DispatchHost="$(ls -l "${file_DispatchLock}" 2>/dev/null | ${cmd_AWK} -F"_" '{print $2}')"
  [[ "$(hostname)" == "${str_DispatchHost}" ]] && return 0 || return 1
}


fn_CheckDispatcher()
{

  local int_LockDate
  local int_NowDate

  ## Check Dispatcher
  ##  typeset local int_DispatcherPID=$(ls -l "${dir_Lock}/${str_ProgramName}.lck" 2>/dev/null | cut -d_ -f2)
  [ -f "${file_DispatchLock}" ] && ( [[ "$(ls -l "${file_DispatchLock}" | ${cmd_AWK} -F"_" '{print $NF}')" ]] || rm "${file_DispatchLock}" )
  if [ -L "${file_DispatchLock}" ] ; then

    if ! fn_IsDispatchHost ; then

      #echo "This is not the dispatch host but need to check that the file is still healthy"
      int_LockDate=$(date "+%s" -d "$( ls -l "${file_DispatchLock}" | ${cmd_AWK} -F" " '{print $6, $7, $8}' )" )
      int_NowDate=$(date "+%s")
      if (( int_NowDate - int_LockDate > 100 )) ; then
        echo "The local file may be stale. There will be a short delay while checking"
        ls -l "${file_DispatchLock}"
        sleep 2
        echo "Removing lock file..."
        sleep 12
        if [ -L "${file_DispatchLock}" ] ; then
          echo "Another process has triggered the dispatcher"
        else
          echo "Starting dispatcher"
          fn_StartDispatcher
          sleep 4
        fi
      else
        : #echo "The age of the lock file ($((int_NowDate - int_LockDate )) seconds) is within tolerance"
      fi

    fi
    fn_IsDispatchHost || return 0

    ## Check the lock is correct
    if [[ $(pgrep -f "${str_ProgramName} -dispatcher -j ${dir_Job}" | head -1) -eq $(ls -l "${file_DispatchLock}" | ${cmd_AWK} -F"_" '{print $NF}') ]] ; then
      return 0
    else
      echo "This is the dispatch host but the process associated with the dispatch lock file has died. (Removing lock)"
      rm "${file_DispatchLock}" 2>/dev/null || :
    fi
  else
    if [[ "$(pgrep -f "${str_ProgramName} -dispatcher -j ${dir_Job}")" ]] ; then
      echo "Found dispatcher - repairing lock file"
      ln -s "${file_DispatchLink}_$(pgrep -f "${str_ProgramName} -dispatcher -j ${dir_Job}")" "${file_DispatchLock}"	  
      return 0
    else
      echo "Starting dispatcher"
      fn_StartDispatcher
    fi
  fi
}
readonly -f fn_CheckDispatcher



fn_StartDispatcher() {
  # echo "Starting dispatcher..."
  # echo "${dir_Base}/${str_ProgramName}" -dispatcher -j "${dir_Job}"
  "${dir_Base}/${str_ProgramName}" -dispatcher -j "${dir_Job}" >> "${file_DispatchLog}" &
  ln -s "${file_DispatchLink}_$!" "${file_DispatchLock}"
  sleep 1
}


fn_RunJobs()
{
  ## Run owned jobs in START state
  ##ls "${dir_Starting}"
  ##shopt -s nullglob
  ##for file_EachJob in $(ls -tr "${dir_Starting}"/* 2>/dev/null)  ; do
  for file_EachJob in $(grep -l "str_Owner=${str_User}" ${dir_Starting}/* 2>/dev/null) ; do
    ##########################################################
    # Section added for slow NFS shares with clustered servers
    sleep 2
    [[ -f ${file_EachJob} ]] || continue
    ##########################################################

    printf "\n%s Starting %s" "$(${fn_LogDate})" "$(basename "${file_EachJob}")"
    fn_CreateFile "${dir_Log}"/"$(basename "${file_EachJob}").log"
    if [[ -x "${file_EachJob}" ]] ; then
      if [[ -z ${str_Group} ]] ; then
        nohup "${file_EachJob}" </dev/null >> "${dir_Log}/$(basename "${file_EachJob}").log" 2>&1 &
      else
        newgrp "${str_Group}" << EOGROUP
        nohup "${file_EachJob}" </dev/null >> "${dir_Log}"/"$(basename "${file_EachJob}").log" 2>&1 &
EOGROUP
      fi
    else
      ## Fail the job as not executable
      #echo "Job not executable - running with bash"
      if [[ -z "${str_Group}" ]] ; then
        nohup /bin/bash "${file_EachJob}" </dev/null >> "${dir_Log}/$(basename "${file_EachJob}").log" 2>&1 &
      else
        newgrp "${str_Group}" << EOGROUP
        nohup /bin/bash "${file_EachJob}" </dev/null >> "${dir_Log}/$(basename "${file_EachJob}").log" 2>&1 &
EOGROUP
      fi
    fi
    ## To ensure started in order
    sleep 1
  done
}
readonly -f fn_RunJobs


fn_LockManager()
{
  ## An easier way to check locks
  local lst_Locks
  lst_Locks=$(ls "${dir_Lock}")
  while : ; do
    fn_ShowTop
    fn_ShowLine
    int_Count=1
    for file_Lock in ${lst_Locks} ; do
      printf "%s%s%${int_Column1Width}s | "  "${dis_Reset}" "${str_StatusColour}" "${int_Count}"
      printf "%s -> %s\n" "${file_Lock}" "$(ls -l ${dir_Lock}/${file_Lock} | cut -d ">" -f2)"
      arr_Locks[int_Count]="${file_Lock}"
      (( int_Count+=1 ))
    done
    if [[ ${int_Count} -lt 2 ]] ; then
      printf "\n\n No locks active\n\n"
      fn_ShowLine "="
      fn_PressEnter
      return 0
    else
      fn_ShowLine "="

      printf "\n Select job number lock to delete | e%sX%sit : " "${dis_ULOn}" "${dis_ULOff}"

      read -e -t 30 char_Choice
      [[ "${char_Choice}" = "" ]] && char_Choice="x"
      case "${char_Choice}" in

        ## Lock transition
        d | D ) printf "rm lock " ;;
        [0-9]* ) echo "removing ${dir_Lock}/${arr_Locks[${char_Choice}]}" ; rm "${dir_Lock}/${arr_Locks[${char_Choice}]}" ; sleep 2 ;;

        x | X ) return 0 ;;
      esac
      lst_Locks=$(ls "${dir_Lock}")
    fi
  ##  fn_RunJobs
  done
}
readonly -f fn_LockManager
