#!/bin/bash
#
# Copyright 2016 WebMarcIT Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# obrar
#
# Using standrd project space directory structures
#       projects/
#             common/
#                       etc/          obrar.def
#                       functions/
#                       plugins/
#             <project1>/
#                       bin/
#                       etc/
#                       functions/
#                       plugins/
#             <project2>/
#                       bin/
#                       etc/
#                       functions/
#                       plugins/
#       var/logs
# VARIABLE naming convention
# Variable names will use <prefix Hungarian Notation>_CamelCase
# b    boolean                  TRUE,1 | FALSE,0
# fn   function name            fn_function
# p    pointer
# str  string
# dir  the variable defines a directory
# file the variable defines a filename
#
# Ideas not yet implemented........
# <hn>_ext_<var name>     A variable that has been derived from running an external script or
#                         command that might change
# <hn>_Local_<var name>   Variable that is defined as local for the function it is used for
# <hn>_Global_<var name>  Global variable that can be used in plugins when adding tasks to a 
#                         scorch job
# <hn>_Job_<var name>     Variables that are used when the job is running. Used to protect
#                         GLOBAL variable pollution
# =============================================================================================
# History
# 1.0	160201    marc        First running demo
# 1.1 180519    marc        Updated for first time install
# 1.2 180520    marc        Find updated
# 1.3 181107    marc        #77 Install no longer duplicates tag line
# 1.4 181125    marc        #85 Bash 3 retrospective support
# 1.5 190104    marc        #90 chgrp options added for str_Group settings
# 1.6 190225    marc        #97 dir_Orig fixed

# Program settings
typeset str_ProgramVersion="1.5"
typeset    str_ProgramName="$(basename "$0")"
typeset   str_FunctionName="${str_ProgramName}"
typeset            dir_Run="$(dirname "$0")"
typeset             str_OS="$(uname -o)"
#typeset           dir_Orig="$(pwd)/${dir_Run}"
typeset           dir_Orig="$(cd $dir_Run && pwd)"
typeset        cmd_LogDate="date +%y%m%d-%H%M%S"
typeset           file_Log=/dev/null
typeset   int_WarningCount=0

# Statistics
typeset      int_StartTime=$(date +%s)
typeset        int_EndTime=0


# Protect from undeclared variables
set -u 


# The running directory $dir_Run will become the str_BaseDir and will be dependant on a relative or absolute path
#typeset dir_Base=$(fn_BaseDir "${dir_Run}")
#echo $dir_Base

# User maintainable
typeset         str_CommonBase=projects
typeset         str_CommonName=common
typeset                str_Etc=etc
typeset                str_Var=var
typeset                str_Tmp=tmp
typeset                str_Log=log
typeset            str_Timings=stats
typeset          str_Functions=functions
typeset     file_TagDefinition=${str_ProgramName}.def
typeset            file_Config=${str_ProgramName}.env
typeset str_FunctionIdentifier="fn_"
typeset SEPERATOR="====================================================================="

# System maintainable
typeset       dir_Base=$(cd ${dir_Run} && pwd || /tmp )
typeset    dir_Project=${dir_Base}/${str_CommonBase}
typeset     dir_Common=${dir_Base}/${str_CommonBase}/${str_CommonName}
typeset        dir_Etc=${dir_Common}/${str_Etc}
typeset        dir_Var=${dir_Base}/${str_Var}
typeset  dir_Functions=${dir_Common}/${str_Functions}
typeset    dir_LogBase="${dir_Var}/${str_ProgramName}/${str_Log}/"
typeset  str_LogPrefix="$(date +%y%m%d-%H%M%S)-"
#typeset      _Log=$(date +%Y%m)
typeset        dir_Tmp=${dir_Base}/${str_Tmp}
typeset    dir_Timings=${dir_Var}/${str_ProgramName}/${str_Timings}
typeset      int_JobID=
typeset int_ReturnCode=
typeset      b_Install=
typeset  b_Interactive=1
typeset        str_Tag=
typeset  b_FoundConfig=0
typeset      b_Verbose=
typeset    str_Project=
typeset   str_LProject=
typeset  str_TimingExt=".tim"
typeset      str_Group=
# Uncomment and set correct group for group directory and file creation
# export str_Group=scorch


# These function definitions are being stubbed until real one loaded
fn_LogDate() { printf "$($cmd_LogDate) $@\n";}
Message() { printf "$($cmd_LogDate) %15s INFO  $@\n" "[${str_FunctionName}:${int_WarningCount}]" | tee -a ${file_Log} ;}
Verbose() { [ "${b_Verbose}" ] && printf "$($cmd_LogDate) %15s DEBUG $@\n" "[${str_FunctionName}:${int_WarningCount}]" | tee -a ${file_Log};}
Error()   { (( int_WarningCount ++ )); printf "$($cmd_LogDate) %15s ERROR ${SEPERATOR}\n" "[${str_FunctionName}:${int_WarningCount}]" ; printf "$($cmd_LogDate) %15s ERROR $@\n" "[${str_FunctionName}:${int_WarningCount}]" | tee -a ${file_Log};Verbose "Function chain: $(echo "${FUNCNAME[@]}"|tr -s " " "<")" | tee -a ${file_Log};   int_EndTime=$(date +%s) ; (( int_EndTime = int_EndTime - int_StartTime )) ; printf "$($cmd_LogDate) %15s ERROR After ${int_EndTime} seconds.\n" "[${str_FunctionName}:${int_WarningCount}]" | tee -a ${file_Log} ; exit 1;}
Warning() { (( int_WarningCount ++ )); printf "$($cmd_LogDate) %15s WARN  $@\n" "[${str_FunctionName}:${int_WarningCount}]" | tee -a ${file_Log};}


fn_GetJobID()
{
  Verbose "Entering ${FUNCNAME}"
  # Function to create an atomic action of getting and recording a new job id

  file_JobID="${dir_Var}"/JobID.${str_ProgramName}
  [[ ! -f "${file_JobID}" ]] && fn_CreateFile "${file_JobID}"

  typeset local file_JobIDLock="${file_JobID}".lock
  #fn_CreateFile "$file_JobIDLock"
  if ( set -o noclobber; > "${file_JobIDLock}") 2> /dev/null ; then
    if [ -r "${file_JobID}" ] ; then
      int_JobID=$(cat "${file_JobID}")
    else
      int_JobID=0
    fi
    (( int_JobID++ ))
    echo ${int_JobID} > "${file_JobID}"
    rm -f "${file_JobIDLock}"
  else
    Error "Could not get exclusive lock. Try again.\n If the issue persists remove the lock file ${file_JobIDLock}\n"
    exit 1
  fi
}
readonly -f fn_GetJobID


#fn_CreateFile()
#{
#  Verbose "Entering ${FUNCNAME}"
#  typeset local file_Name="${1:-}"
#  typeset local b_Blank="${2:-}"
#  Verbose "Creating file <${file_Name}>"
#  touch "${file_Name}" 
#  [[ $? -ne 0 ]] && echo "Error: Cannot create file ${file_Name}" && exit 1
#  chmod 664 "${file_Name}"
#  [[ "${b_Blank}" ]] && > "${file_Name}"
#}
#readonly -f fn_CreateFile


fn_CreateFile()
{
  typeset local file_Name="${1:-}"
  typeset local b_Blank="${2:-}"
  touch "${file_Name}"
  [[ $? -ne 0 ]] && echo "Error: Cannot create file ${file_Name}" && exit 1
  chmod 664 "${file_Name}"
  [[ "${b_Blank}" ]] && > "${file_Name}"
  if [[ ! -z ${str_Group} ]] ; then
    Verbose "chgrp file ${file_Name} with chgrp ${str_Group} " && sleep 2
    chgrp ${str_Group} ${file_Name} || echo "Error: Cannot chgrp ${str_Group} ${file_Name}. Check file and groups."
  else
    :
    Verbose "Creating default file $file_Name <${str_Group}>"
  fi
}
readonly -f fn_CreateFile

fn_Mkdir()
{
  typeset local dir_Name="${1}"
  mkdir -p -m 770 "${dir_Name}"
  if [[ ! -z ${str_Group} ]] ; then
    Verbose "chgrp dir ${dir_Name} with chgrp ${str_Group} " && sleep 2
    chgrp ${str_Group} ${dir_Name} || echo "Error: Cannot chgrp ${str_Group} ${dir_Name}. Check file and groups."
  else
    :
    Verbose "Creating dir $dir_Name <${str_Group}>"
  fi
}
readonly -f fn_Mkdir


fn_Help()
{
  printf "${str_ProgramName}[${str_ProgramVersion}]\n
NAME
\t${str_ProgramName} - deployment runbook automation framework

SYNOPSIS
\t${str_ProgramName} [ [-h] | [-l [str]] [-v] ] ] <TAG> [ <TAG arguments> ]

DESCRIPTION
\tThis script passes arguments to a set of predefined functions to ensure
\ta repeatable, auditable, consistent run of functions

OPTIONS

\t-h, --help         \tShow this help and version\n
\t-l, --list [str]   \tList Tags or list tags matching string\n
\t-t, --timings [tag]\tShow previous timing for functions in tags\n
\t-test, --test <tag>\tTest Mode only. Verifies function names and parameters passed\n
\t-v, --verbose      \tVerbose output\n

\t-install           \tCreate initial directory structure\n

\t<TAG> <args>       \tThe TAG to call. Anything after the TAG
\t                   \twill be treated as an argument to the tag

EXAMPLES
\t${str_ProgramName} -v DEMO\n
\tWill show verbose output from ${str_ProgramName} and run functions/
\tdefined in the ${file_TagDefinition} file by the DEMO tag

\t${str_ProgramName} DEMO -v\n
\tWill run functions defined in the ${file_TagDefinition} file and
\tpass the -v flag as an argument to the DEMO tag

\t${str_ProgramName} -l\n
\tList all TAG definitions from all ${file_TagDefinition} files

\t${str_ProgramName} -l DEM\n
\tList all TAG definitions from all ${file_TagDefinition} files that
\tcontain the matching string 'DEM' either in tag name, variables or
\tfunction list

Example def file
obrar.def is split into four columns
#  TAG  | reserved | Args      | functions
VPN     |  PI      | R:TIME:t: | ${str_FunctionIdentifier}Test ${str_FunctionIdentifier}GetIPDetails

Scripting functions
fn_LogDate
Message
Verbose
Error
Warning


"

  exit 0
}
readonly -f fn_Help

fn_Timings()
{
  typeset local str_FunctionName=${1:-}
  typeset local file_Timing="${dir_Timings}/${str_FunctionName}${str_TimingExt}"
  fn_CreateFile "$file_Timing"
  typeset local int_Diff= str_Diff=
  if [ -r "${file_Timing}" ] ; then
    Message "Timings function:${str_FunctionName}"
    printf "Runs\tMin\tMax\tAverage\n"
    cat ${file_Timing} | sed 's/,/\t/g'
  else
    Message "Checking TAGs"
    typeset local str_Functions="$(fn_ListTags ${str_FunctionName} timings | cut -d"|" -f4)"
    Verbose "Functions: <${str_Functions}>"
    if [ ! -z "${str_Functions}" ] ; then
      for str_EachFunction in ${str_Functions} ; do
        file_Timing="${dir_Timings}/${str_EachFunction}${str_TimingExt}"
        fn_CreateFile "$file_Timing"
        if [ -r "${file_Timing}" ] ; then
          Message "Timings function:${str_EachFunction}"
          printf "Runs\tMin\tMax\tAverage\n"
          cat ${file_Timing} | sed 's/,/\t/g'
        else
          Warning "No functions timing file found ${file_Timing}"
        fi
      done
    else
      Message "No timings or not readable ${file_Timing}"
    fi
   fi
}
readonly -f fn_Timings

fn_CheckSetUp()
{
  Verbose "Entering ${FUNCNAME}"
  typeset b_SetUp=         # Is this the first run

  if [[ ! -z ${str_Group} ]] ; then
    # Check str_Group is ont of groups
    if [[ "$(groups)" =~ "${str_Group}" ]] ; then
      :
    else
      printf "\n\n Error: ${str_ProgramName} is using a group account of ${str_Group} but you are not a member.\n"
      printf "\n Your available groups are:\n "
      groups
      printf "\n\n Check with ${str_ProgramName} administrator, or a system administrator.\n"
      exit 1
    fi
  fi

  # This function will check that all Scorch components are set to allow a smooth run.
  typeset local lst_Directories="dir_Common dir_Var dir_Etc dir_LogBase dir_Tmp dir_Timings"
  [[ ${b_Install} ]] && printf "\n\n\tInitialising....\n\n"
  for p_Variable in ${lst_Directories} ; do
    if [[ ! -d ${!p_Variable} ]] ; then
      printf "\n${p_Variable}\tmkdir -p -m 770 \"${!p_Variable}\"" && b_SetUp=1
      [[ ${b_Install} ]] && mkdir -p -m 770 "${!p_Variable}" && b_SetUp=
    fi
  done
  if [[ ${b_Install} ]] ; then
    printf "\n Creating common example ${str_ProgramName}.def file \n Example ${str_ProgramName}.env\n"
    
    # Create COMMON space
    fn_CreateFile ${dir_Common}/${str_Etc}/${file_TagDefinition}
    fn_CreateFile ${dir_Common}/${str_Etc}/${file_Config}
    fn_Mkdir ${dir_Common}/${str_Functions}

    # Create DEMO space
    fn_Mkdir ${dir_Project}/demo/${str_Etc} ${dir_Project}/demo/${str_Functions}
    fn_CreateFile ${dir_Project}/demo/${str_Etc}/${file_Config}

    # Create DEMO tag
    if [[ ! -f ${dir_Project}/demo/${str_Etc}/${file_TagDefinition} ]] ; then 
      printf "#  TAG  | reserved | Args      | functions\nDEMO1     |  DEMO      | R:TIME:t: | ${str_FunctionIdentifier}Demo1" >> ${dir_Project}/demo/${str_Etc}/${file_TagDefinition}
    fi
    # Create DEMO function
    printf "${str_FunctionIdentifier}Demo1()\n{\n  Message \"Sleeping for \$TIME seconds\"\n  sleep \$TIME\n}\n" > ${dir_Project}/demo/${str_Functions}/${str_FunctionIdentifier}Demo1
 
    # Clear stats file
    > ${dir_Timings}/${str_FunctionIdentifier}Demo1${str_TimingExt}
    exit 0
  fi


  if [[ ${b_SetUp} ]] ; then
    printf "\n\n\nThere are missing files and directories.\n"
    printf "To install run the following command as the framework owner:\n"
    printf "\t${dir_Orig}/${str_ProgramName} -install\n"
    exit 1
  fi

  typeset local lst_ConfigFiles=$(find -L ${dir_Base} -name ${file_TagDefinition})
  if [[ ${#lst_ConfigFiles} = 0 ]] ; then
    printf "Could not find any config files (${file_TagDefinition}) from directory (${dir_Base})\n"
    exit 1
  fi

  Verbose "Making log directory mkdir -p -m 775 ${dir_LogBase}"
  fn_Mkdir ${dir_LogBase}

  [[ -z ${file_TagDefinition} ]] && Error "No file_TagDefinition defined"
  [[ -z ${str_Tag}     ]] && Error "No TAG passed"
}
readonly -f fn_CheckSetUp


fn_Header()
{
  Verbose "Entering ${FUNCNAME}"
  Message ${SEPERATOR}
  Message "     User : $(whoami)"
  Message "      Ran : ${dir_Run}/${str_ProgramName} ${lst_ProgramArgs} ${str_Tag} ${lst_TagArgs}"
  Message "  Version : ${str_ProgramVersion}"
  Message "       On : $(hostname)"
  Verbose "       OS : ${str_OS}"
  Verbose "    umask : $(umask)"
  Message "       At : $(date)"
  Message "     From : $(pwd)"
  Message ${SEPERATOR}
  Message "   Job ID : ${int_JobID}"
  Message " Log File : ${file_Log}"
  Message ${SEPERATOR}
}
readonly -f fn_Header


fn_ListTags()
{
  # Return a list of TAG that match the users optional search string
  # file_TagDefinition=
  Verbose "Entering ${FUNCNAME}"
  Verbose "Checking for file_TagDefinition files <${file_TagDefinition}> from ${dir_Project}"
  typeset local  str_Grep="${1:-}"
  typeset local b_Timings="${2:-}"
  [ ! -z ${b_Timings} ] && b_Timings="-w"
  if [[ -z ${str_Grep} ]] ; then
    find -L ${dir_Project} -name ${file_TagDefinition} -${FIND_EXEC} grep -v ^# {} \;
  else
    find -L ${dir_Project} -name ${file_TagDefinition} -${FIND_EXEC} grep -v ^# {} \; | grep -i ${b_Timings} ${str_Grep}
  fi
  set +x
}
readonly -f fn_ListTags


fn_ProcessTag()
{
  Verbose "Entering ${FUNCNAME}"
  Verbose "      Tag : ${str_Tag}"
  Verbose " Tag Args : \"${lst_TagArgs}\""
  Verbose ${SEPERATOR}
  str_TagLine=$(find -L ${dir_Base} -name ${file_TagDefinition} -${FIND_EXEC} grep -w ^${str_Tag} {} \;)
  typeset local int_TagCount=$(echo "${str_TagLine}" | wc -l )

  if [ ${int_TagCount} -ge 2 ] ; then
    Warning "Multiple tags found. Modify or remove tags in the following files:"
    find -L ${dir_Base} -name ${file_TagDefinition} -exec grep -l -w ^${str_Tag} {} \;
    Error "Modify or remove tags with ${str_Tag}"
  fi
  if [ "${#str_TagLine}" = 0 ] ; then
    str_TagLine=$(find -L ${dir_Base} -name ${file_TagDefinition} -${FIND_EXEC} grep -iw ^${str_Tag} {} \;)
    if [ "${#str_TagLine}" != 0 ] ; then
      Error "TAG definitions are case sensitive. Did you mean\n${str_TagLine}"
    else
	  local str_TagExample=$(${BASH_SOURCE[0]} -l | head -1)
      Error "No TAG definition found.
  
        Check from the ${dir_Base} directory for files named ${file_TagDefinition}.
        find -L ${dir_Base} -name ${file_TagDefinition}
        ${str_ProgramName} is expecting to find a definition in the form
        ${str_TagExample}\n"
		$BASH_SOURCE} -l | head -1
    fi
  fi
  
  # Get project space details from config
  # =====================================
  typeset local str_Tmp=$(find -L ${dir_Base} -name ${file_TagDefinition} -exec grep -l -w ^${str_Tag} {} \; )
  str_Project=$(echo ${str_Tmp#${dir_Project}/} | cut -d/ -f1)

  # Process again to remove leading and trailing spaces
  str_Project=$(echo ${str_Project} | tr [:lower:] [:upper:] )
  str_LProject=$(echo ${str_Project} | tr [:upper:] [:lower:])
  Message "Project space : <${str_Project}>"
  
  Message "  Tag definition : $(echo ${str_TagLine} | cut -d'|' -f1,3,4)"
  
  # Get tag arguments list from config
  # ==================================
  typeset local str_ConfigArgs=$(echo ${str_TagLine} | awk -F"|" '{print $3}')
  Verbose "  Tag arg check : <${str_ConfigArgs}>"

  # Process required and optional arguments against passed arugments
  for str_EachConfigArg in ${str_ConfigArgs} ; do
    Verbose "  Config definition : <${str_EachConfigArg}>"
         str_Required=$(echo ${str_EachConfigArg} | cut -d: -f1)
     str_VariableName=$(echo ${str_EachConfigArg} | cut -d: -f2)
    str_ArgumentLabel=$(echo ${str_EachConfigArg} | cut -d: -f3)
    if $(typeset -p ${str_VariableName} >/dev/null 2>&1 ) ; then
      Warning "${str_VariableName} is either a reserved ${str_ProgramName} variable or system variable."
      Message "Remove it or change it in the definition file."
    else
      Verbose "Initialising ${str_VariableName}"
      eval "${str_VariableName}="
    fi
    # If there are 4 colons, then its not a flag and requires a value
    # If there are only 3 colons its a flag
    if [ $(echo ${str_EachConfigArg} | awk -F":" '{print NF}' ) -eq 4 ] ; then
      b_Flag=0
    else
      b_Flag=1
    fi

    # Check if the argument is required or optional
    typeset local b_Found=0                 # Used to check required variables are passed
    case ${str_Required} in
      R ) b_Required=1 ;;
      O ) b_Required=0 ;;
      * ) Error "Tag argument definitions should start with R (Required) or O (Optional) not <${str_Required}>" ;;
    esac
    Verbose "  Checks Required:${b_Required} Variable:${str_VariableName} Label:-${str_ArgumentLabel} Flag:${b_Flag}"

    typeset local str_SetNextArg=           # Used to hold the next argument

    # Process the TAG configuration items, looking for valid arguments in the command line
    for str_EachArg in "${arr_TagArgs[@]}" ; do
      if [ ${b_Flag} -eq 1 ] ; then
        if [ "${str_EachArg}" = "-${str_ArgumentLabel}" ] ; then
          eval "${str_VariableName}=TRUE"
          Message "  ${str_VariableName}:${!str_VariableName}"
          b_Found=1
        fi
      else
        if [[ ! -z "${str_SetNextArg}" ]] ; then
          eval "  ${str_SetNextArg}=\"${str_EachArg}\""
          Message "  ${str_SetNextArg}:${!str_SetNextArg}"
          b_Found=1
          str_SetNextArg=
        fi
        case ${str_EachArg} in 
          -* ) if [ "${str_EachArg}" = "-${str_ArgumentLabel}" ] ; then
                 str_SetNextArg=${str_VariableName}
               fi ;;
          *  ) : #Verbose "    Value: ${str_EachArg}"
                ;;
        esac
      fi
    done
    if [ ${b_Required} -eq 1 ] ; then
      if [ ${b_Found} -eq 0 ] ; then
        Warning "Required argument -${str_ArgumentLabel} not found"
      fi 
    fi

  done
  (( int_WarningCount > 0 )) && Error "Warning count greater then zero. Review warnings."
  # Process the arugments list making sure all have been captured in the TAG config list
  Message ${SEPERATOR}
}
readonly -f fn_ProcessTag


fn_SourceSpaceEnvFile()
{
  typeset local str_LProject=${1:-}
  Verbose "Entering ${FUNCNAME}"
  Verbose "  Project space : <${str_Project}> : <${str_LProject}>"
  Verbose "  Looking for a environment ${file_Config} config file in ${dir_Project}/${str_LProject}/${str_Etc}"
  if [ -r "${dir_Project}/${str_LProject}/${str_Etc}/${file_Config}" ] ; then
    Verbose "$(ls -l ${dir_Project}/${str_LProject}/${str_Etc}/${file_Config})"
    Message "Loading env file ${dir_Project}/${str_LProject}/${str_Etc}/${file_Config}"
    # Protect the main session by checking the env file can be sourced
    bash ${dir_Project}/${str_LProject}/${str_Etc}/${file_Config}
    if [ $? -eq 0 ] ; then
      source ${dir_Project}/${str_LProject}/${str_Etc}/${file_Config}
    else
      Error "There were issues loading the env file"
    fi
  else
    Warning "Cannot find env file: <${dir_Project}/${str_LProject}/${str_Etc}/${file_Config}>"
  fi
  Verbose ${SEPERATOR}
}
readonly -f fn_SourceSpaceEnvFile


fn_ProcessFunctions()
{
  Verbose "Entering ${FUNCNAME}"
  typeset local lst_Functions=$(echo ${str_TagLine} | cut -d'|' -f4)
  Verbose "  Project space : <${str_Project}> : <${str_LProject}>"

  Message "  Function list : ${lst_Functions}"

  for str_Function in ${lst_Functions} ; do
    Message ${SEPERATOR}
    # Setting audit line 
    str_FunctionName=${str_Function}
    typeset -f ${str_Function} >/dev/null 2>&1
    if [ $? = 0 ] ; then
      # COMMON Function being used
      Verbose "Common function found"
      Message ${str_Function}
    else
      # Check for function in SPACE directory
      Verbose "Checking ${str_Project} space"
      if [ -r ${dir_Project}/${str_LProject}/${str_Functions}/${str_Function} ] ; then
        source ${dir_Project}/${str_LProject}/${str_Functions}/${str_Function}
        typeset -f ${str_Function} >/dev/null 2>&1 || Error "There was no function called ${str_Function} in ${dir_Project}/${str_LProject}/${str_Functions}/${str_Function}"
      elif [ -r ${dir_Common}/${str_Functions}/${str_Function} ] ; then
        Verbose "Found ${str_Function} in ${dir_Common}/${str_Function} area."
        source ${dir_Common}/${str_Functions}/${str_Function}
        typeset -f ${str_Function} >/dev/null 2>&1 || Error "There was no function called ${str_Function} in ${dir_Common}/${str_Functions}/${str_Function}"
      else
        if [ -f ${dir_Project}/${str_LProject}/${str_Functions}/${str_Function} ] ; then
          Error "Found a function file but its not readable: ${dir_Project}/${str_LProject}/${str_Functions}/${str_Function}"
        else
          Error "Cannot find the function file: ${dir_Project}/${str_LProject}/${str_Functions}/${str_Function}"
        fi
      fi
    fi
    typeset local int_StartTime=$(date +%s)
    typeset local   int_EndTime=

    [[ ${b_Test} ]] && Message "TESTMODE: ${str_Function}" || ${str_Function}
    int_ReturnCode=${PIPESTATUS[0]}
    if [ ${int_ReturnCode} != 0 ] ; then
      Warning "The function <${str_Function}> aborted abnormally."
	  Warning "Consider handling errors better in the function ${str_Function}."
      Error "${str_Function} errored with status code ${int_ReturnCode}."
      exit 1 # Shouldnt actually get here but just in case
    fi
    int_EndTime=$(date +%s)
    (( int_EndTime = int_EndTime - int_StartTime ))
    str_FunctionName=${str_ProgramName}
    [[ ${b_Test} ]] || fn_UpdateTimings "${str_Function}" "${int_EndTime}"

  done
  Verbose ${SEPERATOR}
}
readonly -f fn_ProcessFunctions

fn_UpdateTimings()
{
  # Statistics file in a csv format
  # Run counter, LOW, HIGH, Average
  typeset local str_FunctionName=${1:-}
  typeset local int_Timing=${2:-}
  typeset local file_Timing="${dir_Timings}/${str_FunctionName}${str_TimingExt}"
  fn_CreateFile "$file_Timing"
  typeset local int_Diff= str_Diff=
  if [ -r "${file_Timing}" ] ; then
    typeset local str_Stats=$(cat ${file_Timing})
    typeset local int_Runs=${str_Stats%%,*}
    typeset local int_Min=$(echo ${str_Stats} | cut -d"," -f2)
    typeset local int_Max=$(echo ${str_Stats} | cut -d"," -f3)
    int_Min=${int_Min:-${int_Max}}
    typeset local int_CurrentAverage=${str_Stats##*,}
    if (( int_CurrentAverage < int_Timing )) ; then
      (( int_Diff = int_Timing - int_CurrentAverage ))
      str_Diff="slower"
    else
      (( int_Diff = int_CurrentAverage - int_Timing ))
      str_Diff="quicker"
    fi
    (( int_Min > int_Timing )) && int_Min=${int_Timing}
    (( int_Max < int_Timing )) && int_Max=${int_Timing}
    (( int_Average = int_CurrentAverage * int_Runs + int_Timing ))
    (( int_Runs++ ))
    (( int_Average = int_Average / int_Runs ))

    echo "${int_Runs},${int_Min},${int_Max},${int_Average}" > ${file_Timing}

    Message "${str_Function} took ${int_EndTime} seconds (${int_Diff} seconds ${str_Diff} than average run)" 
  else
    fn_CreateFile "${file_Timing}"
    echo "${int_Timing},1" > "${file_Timing}"
  fi
  #cat ${file_Timing}
}

fn_Footer()
{
  Verbose "Entering ${FUNCNAME}"
  Verbose "  Project space : <${str_Project}> : <${str_LProject}>"
  int_EndTime=$(date +%s)
  (( int_EndTime = int_EndTime - int_StartTime ))
  Message ${SEPERATOR}
  [[ ${b_Test} ]] && Message "TESTMODE: Completed" || Message "SUCCESS: ${str_Tag} completed taking ${int_EndTime} seconds"
  Message ${SEPERATOR}  
}
readonly -f fn_Footer

fn_LogTrap()
{
  Warning "${str_ProgramName} ${1:-}"
  Error   "ABORTED"
}
trap "fn_LogTrap \"ctrl-c\"" 2
trap "fn_LogTrap \"killed\"" 2 5 15

# source comman project etc and functions that are not dotted backups
# ===================================================================
Verbose "Sourcing common project etc files and functions"
if [[ -r "${dir_Functions}" ]] ; then
  for file_CommonFunction in $(ls "${dir_Functions}/${str_FunctionIdentifier}"* 2>/dev/null) ; do
    Verbose "  ${file_CommonFunction}"
    ( bash ${dir_Functions}/${file_CommonFunction} >/dev/null 2>&1 ) && source ${dir_Functions}/${file_CommonFunction}
  done
else
  Warning "Cannot access common functions directory: ${dir_Functions}"
fi

# MAIN
# Process the command line to see what has been passed to obrar and what has been passed to the tag
typeset lst_ProgramArgs=""
typeset -a  arr_TagArgs=""
typeset     lst_TagArgs=""    # Easier for VERBOSE display 
typeset      b_ListTags=""
typeset          b_Test=""

[[ ${BASH_VERSION%%.*} -ge 4 ]] && FIND_EXEC=execdir || FIND_EXEC=exec

Verbose "Processing ${str_ProgramName} Arguments list"
while [ $# -gt 0 ] ; do
  str_Arg="${1}"
  case ${str_Arg} in
    -v | --verbose  ) b_Verbose=1 ;;
    -h | --help     ) fn_Help     ;;
	-test | --test  ) b_Test=1    ;;
    -n              ) b_Interactive=0   ;;	
    -l | --list     ) b_ListTags="TRUE" ;; 
    -install        ) b_Install=1 ;;
    -t | --timings  ) fn_Timings ${2:-DEMO}  ; exit 0 ;;
    # To allow the same arguments to be passed to TAGS break here 
    *           ) str_Tag=${str_Arg} ; shift ; break ;;
  esac
  lst_ProgramArgs="${lst_ProgramArgs} ${str_Arg}"
  shift
done

# Now process the arguments to the TAG 
Verbose "Processing TAG <${str_Tag}> arguments"
typeset local int_TagArrayCount=0
while [ $# -gt 0 ] ; do
  lst_TagArgs="${lst_TagArgs} ${1}"
  arr_TagArgs[${int_TagArrayCount}]="${1}"
  (( int_TagArrayCount++ ))
  shift
done
Verbose "lst_TagArgs:${lst_TagArgs}"

# If only asked to list the TAGs - only list the TAGs
[ "${b_ListTags}" ] && fn_ListTags $str_Tag && exit 0

# If its not the TAGs, check everything it set up and process the request
fn_CheckSetUp
fn_GetJobID

# Set Common envs
fn_SourceSpaceEnvFile ${str_CommonName}
# Load common functions
fn_LoadFunctions()
{
  local str_Project=${1:-common}
  Verbose "load ${str_Project}/functions"
  local lst_Functions=$(find ${dir_Common}/${str_Functions} -name "fn_*" -type f)
  for file_Function in ${lst_Functions} ; do
    if [ -r ${file_Function} ] ; then
      Verbose "Sourcing ${file_Function}"
      source ${file_Function} || Error "There in common function <${file_Function}>"
    fi
  done
}
fn_LoadFunctions common


# Now that we know what we are dealing with, create the log file directory and set the log file
dir_LogSpace=${dir_LogBase}/$(date +%Y%m)
fn_Mkdir ${dir_LogSpace}
file_Log="${dir_LogSpace}/${str_LogPrefix}${str_Tag}-${int_JobID}.log"
fn_CreateFile "$file_Log"


# Start logging and processing
fn_Header
fn_ProcessTag #Update the timings of each function as we go. Base it on env just in case
fn_SourceSpaceEnvFile ${str_LProject}
fn_ProcessFunctions
fn_Footer
