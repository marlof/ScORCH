#!/bin/bash
##
## Copyright 2016 WebMarcIT Ltd
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## qjira
##
## VARIABLE naming convention
## Variable names will use <prefix Hungarian Notation>_CamelCase
## b    boolean                  TRUE,1 | FALSE,0
## fn   function name            fn_function
## p    pointer
## str  string
## dir  the variable defines a directory
## file the variable defines a filename
## History
## 1.0  181110     marc        First release
## 1.1  181207     marc        Improvements
typeset str_ProgramVersion="1.1"

typeset    str_ProgramName="$(basename "$0")"
typeset            dir_Run="$(dirname "$0")"
typeset           dir_Orig="$(cd $dir_Run && pwd)"
typeset          file_Conf="${dir_Run}/../etc/${str_ProgramName}.conf"

Error()
{
  echo $@
  exit 1
}

fn_Usage()
{
	echo " ${str_ProgramName} [--set] [--create <project> --summary 'text' --description 'text'] [ -j <jira ID> [ --assign <name> | --transition <state> ] ]  [ -v ]"
}

fn_Help()
{
  # Help
  echo " ${str_ProgramName}"
  echo " "
  echo " Using ${file_Conf} to locate the JIRA Server: $JIRA_SERVER"
  echo " "
  echo " # Query Options"
  echo "    -j <ticket number>       Jira Ticket ID"
  echo "    -u <user:password>"
  echo " "
  echo " "
  echo " # Help"
  echo "    -h | --help                          Show help"
  echo "    -v | --verbose                       Display version"
  echo " "
  echo " # Future features and development "
  echo "    create, assign, transition, comment"
  echo "    -c | --create            Create a ticket"
  echo "    -d description"
  echo "    -s state"
  echo "    -a assignee"
  echo "    -set [-d -s -a]"
  echo " "
  echo " # Example"
  echo "    ${str_ProgramName} -j DEP-1         Show full ticket details"
  echo "    ${str_ProgramName} -s -j DEP-1      Show status"
}

[[ ! -r ${file_Conf} ]] && Error "${str_ProgramName} not configured. Expecting JIRA_SERVER= to be set in ${file_Conf}"
source ${file_Conf}
[[ -z $JIRA_SERVER ]] && Error "JIRA_SERVER not exported from shell or not set in ${file_Conf}"

typeset  JIRA_ISSUE_URL=${JIRA_SERVER}/rest/api/2/issue
typeset JIRA_SEARCH_URL=${JIRA_SERVER}/rest/api/2/search

typeset      TICKET=$1

typeset       STATUS= ASSIGNEE= DESCRIPTION= VERBOSE= DESCRIPTION=simple SET=

typeset   PYTHON=$(which python)
typeset     CURL=$(which curl)
typeset JIRAPASS=$(which jirapass)

# Jira pass will now be used - turning off hard coded password
# typeset        AUTH='demo:test123'
# typeset AUTH_HEADER=$(echo -n $AUTH | base64)
! ${JIRAPASS} -r >/dev/null 2>&1 && echo "${JIRAPASS} issues: $(${JIRAPASS} -r)" && exit 1
AUTH_HEADER=$(${JIRAPASS} -r)
#jirapass -r

fn_CheckResponse()
{
  local RESPONSE=${1}
  case ${RESPONSE} in
    HTTP*20*  ) : ;;
    HTTP*400* ) Error "$0: Internal error while trying to insert file message:\n${RESPONSE}" ;;
    HTTP*401* ) Error "$0: Check username and password are correct in ${JIRA_PASSWORD_FILE}" ;;
    HTTP*404* ) Error "$0: Cannot find the JIRA ticket. Check ${JIRA_SERVER}/browse/${_JIRA_ID}" ;;
    HTTP*405* ) Error "$0: Method not allowed" ;;
    *         ) Error "$0: Unhandled error from curl jira ticket check:\n${RESPONSE}" ;;
  esac

}

fn_CreateTicket()
{
  [[ -z $PROJECT ]] && echo "Project not set" && fn_Usage && exit 1
  #!/bin/bash
  file_Data=$(mktemp)
  #_JIRA="http://ukdc1-tc-jir02.worldpaytd.local:8080/rest/api/2/issue/"
  cat >> ${file_Data} << EOF
{
    "fields": {
       "project":
       {
          "key": "$PROJECT"
       },
       "summary": "$SUMMARY",
       "description": "$DESCRIPTION",
       "issuetype": {
          "name": "Task"
       }
   }
}
EOF
  RESPONSE=$(curl -k -s \
     -D- \
     -H "Authorization: Basic ${AUTH_HEADER}" \
     -X POST \
     --data @${file_Data} \
     -H "Content-Type: application/json" \
     ${JIRA_ISSUE_URL} | grep ^HTTP )
  fn_CheckResponse $RESPONSE
  rm $file_Data
}

fn_AddComment()
{
  file_Data=$(mktemp)
  echo "Adding comment $COMMENT to $TICKET"
  cat >> ${file_Data} << EOF
{
    "body": "$COMMENT"
}
EOF

  echo ${JIRA_ISSUE_URL}/${TICKET}
  RESPONSE=$(curl -k -s \
     -D- \
     -H "Authorization: Basic ${AUTH_HEADER}" \
     -X POST \
     --data @${file_Data} \
     -H "Content-Type: application/json" \
     ${JIRA_ISSUE_URL}/${TICKET}/comment | grep ^HTTP)
  fn_CheckResponse $RESPONSE
  rm $file_Data

}

fn_AssignTicket()
{
  file_Data=$(mktemp)
#_JIRA="http://ukdc1-tc-jir02.worldpaytd.local:8080/rest/api/2/issue/"
  echo "assigning $TICKET to ${ASSIGNEE}"
  cat >> ${file_Data} << EOF
{
   "fields": {
       "assignee":{"name":"${ASSIGNEE}"}
   }
}
EOF

  RESPONSE=$(curl -k -s \
     -D- \
     -H "Authorization: Basic ${AUTH_HEADER}" \
     -X PUT --data @${file_Data} \
     -H "Content-Type: application/json" \
     ${JIRA_ISSUE_URL}/${TICKET} | grep ^HTTP)
  fn_CheckResponse "$RESPONSE"
  rm $file_Data
}

fn_ShowTicket()
{
  _JIRA_ISSUE_DETAILS=$(${CURL} -s -X POST -H "Authorization: Basic ${AUTH_HEADER}" \
                             -H "Content-Type: application/json" \
                             --data '{"jql":"key = '${TICKET}'"}' \
                             "${JIRA_SEARCH_URL}")
  #echo "DETAILS:$_JIRA_ISSUE_DETAILS" 
  [[ ${VERBOSE} ]]     && echo "${_JIRA_ISSUE_DETAILS}"

  echo "${_JIRA_ISSUE_DETAILS}" | grep -q '<p>Problem accessing /rest/api/2/search' && Error "Problem accessing REST Api. Check JIRA_SERVER in ${file_Conf}"
  echo "${_JIRA_ISSUE_DETAILS}" | grep -q '<title>Unauthorized (401)</title>'       && Error "Invalid jira username:password"
  echo "${_JIRA_ISSUE_DETAILS}" | grep -q "Reason : AUTHENTICATION_DENIED"          && Error "Password may be valid but account may be temporarily locked"
  [[ -z ${_JIRA_ISSUE_DETAILS} ]] && Error "Jira page seems blank - has jira $JIRA_SERVER started correctly '${dir_Orig}/${str_ProgramName}'"
  if echo ${_JIRA_ISSUE_DETAILS} | grep -q "errorMessages" ; then
    if echo "${_JIRA_ISSUE_DETAILS}" | jshon -e errorMessages -a -u | grep -q "does not exist for field 'key'" ; then
      echo "Ticket '${TICKET}' cannot be found"
    else
      echo "Error. Check jira API messages:"
      echo "${_JIRA_ISSUE_DETAILS}" | jshon -e errorMessages -a -u
    fi
    exit 1
  elif echo ${_JIRA_ISSUE_DETAILS} | grep -q '^{"startAt":' ; then
    echo "You can't view this issue. It may have been deleted or you don't have permission to view it."
    exit 1
  elif echo ${_JIRA_ISSUE_DETAILS} | grep -q "${str_ProgramName}:ERROR" ; then
    echo "Check Jira server ${JIRA_SERVER}"
    $CURL -s  -X POST -H     "Authorization: Basic ${AUTH_HEADER}" \
                      -H     "Content-Type: application/json" "${JIRA_SEARCH_URL}"
    exit 1
  fi

  [[ ${STATUS} ]]      && printf "Status:"      && echo ${_JIRA_ISSUE_DETAILS} | jshon -e issues -a -e fields -e status -e name -u
  [[ ${ASSIGNEE} ]]    && printf "Assignee:"    && echo ${_JIRA_ISSUE_DETAILS} | jshon -e issues -a -e fields -e assignee -e name -u
  if [[ "${DESCRIPTION}" = "1"  ]]  ; then
    printf "Description:\n"
    echo ${_JIRA_ISSUE_DETAILS} | jshon -e issues -a -e fields -e description -u
  elif [[ ${DESCRIPTION} ]] ; then
    echo ${_JIRA_ISSUE_DETAILS} | jshon -e issues -a -e fields -e description -u  
  fi
}



if [ $# -ne 0 ] ; then
  while [ $# -gt 0 ] ; do
    case "$1" in

      # Help and version modes
      -h | --help    ) fn_Help ; exit 0 ;; #b_Help=1 ;;
      -v             ) VERBOSE=1 ;;
      --version ) echo "${str_ProgramName}[${str_ProgramVersion}]" ; exit 0 ;;

      ## API Mode
      -j | --jira    ) shift ; TICKET=$1 ;;
      -u             ) shift ;   AUTH=$1 ;;

      ## Not yet working
      -set | --set  ) SET=1 ;;
#shift ; str_Assignee=$1 ; fn_AssignTicket ; exit 0 ;;
      -s            ) if [[ "$SET" -eq 1 ]] ; then
                        shift ; STATUS=$1 ; echo here
                      else
                        STATUS=1   ; DESCRIPTION=
                      fi ;;
      -a            ) if [[ "$SET" -eq 1 ]] ; then
                        shift ; ASSIGNEE=$1
                      else
                        ASSIGNEE=1 ; DESCRIPTION=
                      fi ;;
      -d            ) DESCRIPTION=1 ;;
      -c | --create ) shift ; PROJECT=$1 ;;
      --summary     ) shift ; SUMMARY=$1 ;;
      --description ) shift ; DESCRIPTION=$1 ;;
      --comment     ) shift ; COMMENT=$1 ;;



    esac
    shift
  done
fi

if [[ $PROJECT ]] ; then
  fn_CreateTicket
  exit 0
fi

if [[ $COMMENT ]] ; then
  fn_AddComment
  exit 0
fi

if [[ $SET ]] ; then
  echo setting
  if [[ $ASSIGNEE ]] ; then
    fn_AssignTicket
  else
    echo something else
  fi
else
  fn_ShowTicket
fi


#curl -D- -u 'marc:test123' -X GET -H 'Content-Type: application/json' ${JIRA_SERVER}'/rest/api/2/issue/DEP-1'
#${CURL} -D- -u $AUTH -X GET -H 'Content-Type: application/json' "${JIRA_ISSUE_URL}/${TICKET}"

#read
#echo "==============="

# Works
#_JIRA_ISSUE_DETAILS=$(curl -s  -X POST -H     "Authorization: Basic ${AUTH_HEADER}" \
#                                       -H     "Content-Type: application/json" \
#                                       --data '{"jql":"key = '${TICKET}'","fields":["id","description"]}}' "${JIRA_SEARCH_URL}") # || echo "qjira:ERROR")
# in Test
#_JIRA_ISSUE_DETAILS=$(curl -s  -X GET -H     "Authorization: Basic ${AUTH_HEADER}" \
#                                      -H     "Content-Type: application/json" \
#                                      --data '{"jql":"key = '${TICKET}'""}' "${JIRA_SEARCH_URL}")


#echo "==============="
#curl -D- -X GET -H "Authorization: Basic ${AUTH_HEADER}" -H "Content-Type: application/json" "${JIRA_SERVER}/rest/api/2/user?username=user"
# Issue description
#echo ${TICKET}
#echo ">>"
#echo "<<"
#echo ${_JIRA_ISSUE_DETAILS} | jshon -e issues   -a -e fields  -e description -u

#_JIRA_ISSUE_DETAILS=
#   _ISSUE_DESCRIPTION=$(echo ${_JIRA_ISSUE_DETAILS} | ${PYTHON} -c '
#import sys
#import json 
#print json.dumps( json.loads( sys.stdin.read() ), sort_keys=True, indent=4); ')
#   _RC=$? && (( ${_RC} != 0 )) && Error "Error getting issue description - python returned ${_RC}"
#   (( ${_OUTPUT_ALL} )) && echo "Description:"
#   if [[ ! -z ${_ISSUE_DESCRIPTION} ]]
#   then
#      echo ""
#      while IFS= read _LINE
#      do
#         (( ${_OUTPUT_ALL} )) && echo "   ${_LINE}" || echo ${_LINE}
#      done <<< "${_ISSUE_DESCRIPTION}"
#      echo ""
#   fi

