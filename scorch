#!/bin/bash
##
## Copyright 2016 WebMarcIT Ltd
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## scorch
##
## VARIABLE naming convention
## Variable names will use <prefix Hungarian Notation>_CamelCase
## b    boolean                  TRUE,1 | FALSE,0
## fn   function name            fn_function
## p    pointer
## str  string
## dir  the variable defines a directory
## file the variable defines a filename
###
## Ideas not yet implemented........
## <hn>_ext_<var name>     A variable that has been derived from running an external script or
##                         command that might change
## <hn>_Local_<var name>   Variable that is defined as local for the function it is used for
## <hn>_Global_<var name>  Global variable that can be used in plugins when adding tasks to a
##                         scorch job
## <hn>_Job_<var name>     Variables that are used when the job is running. Used to protect
##                         GLOBAL variable pollution
## =============================================================================================
## History
## 1.0       marc        First running demo
## 1.1       marc        Reversed and improved fn_RunJobs
## 1.2       marc        Improved fn_ShowJobs2, pause feature
## 1.3       marc        Improved task list, began lock manager and task manager
## 1.4       marc        Further improvements to task list
## 1.5       marc        Jobs now use symbolic links
## 1.6       marc        Audit handling
##                       Failed job audit tracking
##                       Enterprise Feature (Developer:Debug)
## 1.7       marc        #15 log update
##                       #16 multi job update
##                       shell check updates
##                       trap updates
##                       Enterprise feature multi-parent rule enabled
## 1.8  150805 marc      Improvement to manager layout with dynamic column width
## 1.9  150805 marc      Check for outstanding jobs on exit
## 1.10 150817 marc      Removed System as a key-pair
##      150904 marc      Updated comments
##                       Added upper flag to GetVar
##                       Toggle pause flag
## 1.11 151127 marc      Fixed issue with LOCK filename
##                       github#20 Tail feature added
##      151130 marc      github#13 Added tryTask option
## 1.12 151223 marc      Added fix in progress
##                       Cleaned up some code
## 1.13 160114 marc      Added preferences for SHOWMAX and REFRESH
## 1.14 160126 marc              Indicate Job Ownwer
##                       pauseTask added
##                       breakTask added
## 1.15 160211 marc      Protected header comment lines from stripping when creating openscorch
##                       GAWK and NAWK are both checked (note NAWK does not have upper/lower options)
##                       Improved "owner" check(g|n)awk command
##                       JobID changed to JobID.<program name>
## 1.16 160713 marc      Fixed job owner reporting
##                       Old active jobs recovered from archive
## 1.17 170922 marc      Added update notification to Context Menu
## 1.18 171015 marc      Formatting program and output. Improved %age call for disk space
##                       Added timer to running jobs
## 1.19 171018 marc      Added lower and upper options for GetVar
##                       working on breakTask internal for jobs
## 1.20 171204 marc      Trial python for showJobs
## 1.21dev 180207 marc   Fixing TASK for none running jobs
##                       Adding plugin manager
##                       dos2unix on showJobs.py
##                       Wait group improvements
##                       editor build git test
## 1.22 180424           Task display updates
## 1.22.1 180424  marc   Issue #28 resolved
## 1.23 180502           Completed list is showjobs.py reversed
## 1.24 180503    marc   Publish functions updated to include Python
## 1.25 180509    marc   Resume group tasks
## 1.26 180511    marc   Resumed Group Jobs shows number of failures
## 1.27 180516    marc   github#29 Resume from Tasks
##                       github#30 Manual Tasks
## 1.28 180518    marc   Working with centos
## 1.28.1         marc   Minor format fix
## 1.29           marc
## 1.30           marc   shell read command now reads in raw (-e)
## 1.31           marc   cache file no longer shared
## git config --global core.editor "'C:\Users\marc\Downloads\Sublime Text Build 3143 x64\sublime_text.exe' -multiInst -nosession"
## 1.32           marc   Resume after pause fixed issue #31
##                       Pause and Rules flags shown on showJob #32
## 1.33           marc   read quick for experts and slow for novice
## 1.34           marc   #24 abort jobs
##                       #34 b_Quick fix
##                       #35 Refresh improvement
## 1.35           marc   #23 Added new version features
## 1.36           marc   #36 Improved for multi dispatcher
## 1.37           marc   #23 curl install 
## 1.38           marc   Improved versions feature for correct MD5                    
## 1.39           marc   #39 Add scorch definition to CSV file
## 1.40           marc   #37 Add maintenance mode
## 1.41           marc   #34 Included task and tail quick mode fix
## 1.42           marc   Removed formatting space from "Log Summary"
##                       #40 Added confirmation function
##                           - default preferences confirmation
##                       #41 Add alternative location for auto install files
##                           http and local added
## 1.43           marc   #42 Removed debug code for maintenance and grep
##                       tmp dir changed back to mutli version (local to program)
##                       /dev/shm/<cksum based> linked from tmp/memory
##                       #44 scorch added as extra auto backup file
##                       #38 Permission improvements
## 1.44 180821    marc   Improvement to DF output
##                       #43 Group Manual steps Completed
## 1.45 180904    marc   #45 Associative array to track TASK status
## 1.46 180905    marc   #47 Sort "skip" steps in new mode
## 1.47 180906    marc   Added associative array check
##                       #48 Manual tasks to be moved to manual directory 
##                       #49 Maintenance file (and cache) moved to memory dir
##                       #50 --action, --file and --help output improved
## 1.48 180912    marc   Jenkins build test
##                       #51 IsAlreadyRunning function created for background file jobs
## 1.49 180922    marc   Improvement to #51
##                       #55 Fixing "." errors in range calls
##                       #56 Double "A" in Specific Job Menu - Admin option removed 
##                       #57 Rules Engine checks
##                       #58 output redirect changed to tee -a
## 1.50 181001    marc   #59 Improvement to memory shm link
## 1.51 181004    marc   #60 showline improved output for CR
##                       #59 Improved for first install
##      181008    marc   #62 Bug fix to #58 require ${PIPESTATUS[0]}
##      181009    marc   #63 Try fix (or outstanding)
##      181018    marc   #64 "d" context missing for New State jobs
##      181019    marc   #65 admin job numbering fixed
##                       #68 creation of file for motd added to install
## 1.52 181021    marc   #66 Plugin manager added
##                           + view of plugins
##                       Codename Amarok
##                       #69 File fixed
##                       #70 fixed
## 1.53 181022    marc   #72 Manual message when in sub-group
##                       #73 Filter added to job name - user request
##                       Quiet grep for check owner
##                       Tee option #58 doesnt work very well - changed back
##                       #74 Resume from Manual state 
##                       #75 coloured disk space fixed
## 1.54 181027    marc   #78 Scorch Group testing
## 1.55 181028    marc   Formatting improvememt
## 1.56 181107    marc   #79 Manual state defined
## 1.57 181114    marc   #80 Try tasks that fail are noe shown in task output
## 1.58 181119    marc   #81 Adding Mandatory GetVar feature
## 1.59 181120    marc   #82 Update for ps bash under windows bug
## 1.60 181121    marc   #83 Dispatcher exits if jobs directory missing
## END OF Amarok
## 2.00 181124    marc   #46 Install plugins from plugin library
##                       #86 Added LogWhy to Cancel function
## 2.1 181206     marc   #87 Add Error and Message tasks
##                           + fix to subgroup output
## 2.2 181207     marc   #88 Local install version improved
## 2.3                       dir_Orig fixed
## 2.4 190104     marc   #92 Allow plugins to fail the creation of a job
## 2.5 190107     marc   #90 str_Group additional fixes
## 2.5.1          marc       Patch after testing on live
## Determine the program name and the running directory

typeset str_ProgramVersion="2.5.1"
typeset       str_Codename="Chimera"
typeset  str_LatestVersion="check"
typeset    str_ProgramName="$(basename "$0")"
typeset            dir_Run="$(dirname "$0")"
typeset           dir_Orig="$(cd $dir_Run && pwd)"
typeset     fn_FullLogDate="date +${str_ProgramName}:%y%m%d-%H%M%S"
typeset         fn_LogDate="date +%y%m%d-%H%M%S"
typeset           str_User=$(whoami)

typeset         file_Prefs=~/${str_ProgramName}.prefs
## User EDITOR preference
typeset         cmd_Editor="${EDITOR:-vi}"

typeset         str_Group=
# Uncomment and set correct group for group directory and file creation
# export str_Group=scorch

fn_BaseDir()
{
  ## Taking a directory name as a parameter, output the full absolute path
  ## It could be absolute or relative so check and clean out any <dir>/../<dir> additions
  ## if ${1} starts "/"
  [ -d "${1}" ] || return 1
  cd "${1}" && pwd || return 1
}

fn_Help()
{
  # Help
  echo "${str_ProgramName}"
  echo " # Options"
  echo "    -p <alternative plugin dir>   Use a different plugin directory"
  echo " "
  echo " # Help"
  echo "    -h | --help                          Show help"
  echo "    -v | --verbose                       Display version"
  echo " "
  echo " # Internal Modes"
  echo "    -dispatcher                          Run in dispatcher mode"
  echo "    -new                                 Load new job from input"
  echo "    -file <file template> [-s]           Load new job from file [ and move to start ]"
  echo " "
  echo " # Admin and development "
  echo "    -p <dir>                             Use Plugins from given directory"
  echo "    -f <dir>                             Use Functions from given directory"
  echo " "
  echo " # Command Line Advanced Options"
  echo "    -a | --action <ActionName>           Action Name"
  echo "    -o | --option <keyname>:<keyvalue>   A keypair for the action"
  echo "    -s | --start [-sync]                 Start [only return to prompt when job completes or fails]"
  echo ""
  echo " # Setup"
  echo "    -install                             Setup directories and files for first use"
  echo " # Example"
  echo "    scorch -a SAFEDEMO -o key1:value1 -o key2:val2 -s"
  echo "    scorch --action DRINK-TEA --start -sync"
}
readonly -f fn_Help

## The running directory will become the str_BaseDir and will be dependant on a relative or absolute path
typeset        dir_Base=$(fn_BaseDir "${dir_Run}")
typeset          str_OS=$(uname -o)

## Directory definitions
## =====================
typeset         dir_Etc="${dir_Base}/etc/"
typeset         dir_Var="${dir_Base}/var/"
typeset         dir_Log="${dir_Var}/log/"
typeset        dir_Lock="${dir_Var}/locks/"
typeset         dir_Tmp="${dir_Base}/tmp/"

## Memory tmp files for multi scorch use system
typeset      dir_Memory=/dev/shm/$(echo ${dir_Base} | cksum | tr ' ' '_')
mkdir -p  ${dir_Memory} 2>/dev/null
chmod 775 ${dir_Memory} 2>/dev/null

if [[ ! -L ${dir_Base}/tmp/memory ]] ; then
  if [[ -w ${dir_Tmp} ]] ; then
    ln -s ${dir_Memory} ${dir_Tmp}/memory
    typeset         dir_Tmp=${dir_Base}/tmp/memory/
  fi
fi

typeset     dir_Plugins="${dir_Base}/plugins"
typeset     str_Plugins="$(basename "${dir_Plugins}")"
typeset   dir_Functions="${dir_Base}/functions"
typeset      dir_Python="${dir_Base}/python"
typeset   str_Functions="$(basename "${dir_Functions}")"

## Job definitions
## ===============
typeset         dir_Job="${dir_Base}/jobs"
typeset       int_Count=1
typeset        file_CSV="${dir_Log}/jobs.csv"
typeset         dir_New="${dir_Job}/new"
typeset     dir_Running="${dir_Job}/running"
typeset      dir_Failed="${dir_Job}/failed"
typeset      dir_Fixing="${dir_Job}/fixing"
typeset   dir_Completed="${dir_Job}/completed"
typeset    dir_Starting="${dir_Job}/starting"
typeset      dir_Queued="${dir_Job}/queued"
typeset  dir_Superseded="${dir_Job}/superseded"
typeset     dir_Deleted="${dir_Job}/deleted"
typeset    dir_Archived="${dir_Job}/archived"
typeset     dir_Pending="${dir_Job}/pending"
typeset      dir_Active="${dir_Job}/active"
typeset      dir_Manual="${dir_Job}/manual"

typeset       str_Filter=""

typeset        str_Group=${str_Group:-}
typeset     b_Background=
typeset      int_SubTask=
typeset      str_SubTask=
typeset int_DispatchSleep=10
typeset          hex_MD5=
typeset       file_Cache=${dir_Memory}/mycache.$$
typeset       file_Maint=${dir_Memory}/${str_ProgramName}.maintenance
         
typeset     str_Protocol="http://"
typeset     dir_Location="www.autoscorch.com/downloads"
typeset   dir_URLPlugins="www.autoscorch.com/plugins"
typeset              URL="${str_Protocol}${dir_Location}"
typeset     file_Version="version.txt"
typeset     file_Plugins="plugins.txt"
typeset        file_MOTD="${dir_Etc}/motd"

typeset   b_CreateFailed=


fn_ResetJobDefinitions()
{
         dir_New="${dir_Job}/new"
     dir_Running="${dir_Job}/running"
      dir_Failed="${dir_Job}/failed"
   dir_Completed="${dir_Job}/completed"
    dir_Starting="${dir_Job}/starting"
      dir_Queued="${dir_Job}/queued"
  dir_Superseded="${dir_Job}/superseded"
     dir_Deleted="${dir_Job}/deleted"
    dir_Archived="${dir_Job}/archived"
      dir_Active="${dir_Job}/active"
     dir_Pending="${dir_Job}/pending"
      dir_Active="${dir_Job}/active"
      dir_Manual="${dir_Job}/manual"
}

## Dispatcher definitions
## ======================
typeset int_DispatcherPID=0
typeset   int_DispatchMax=999
typeset      file_JobLock="${dir_Lock}/JobLock"
typeset  file_DispatchLog="${dir_Log}/dispatch.log"
typeset file_DispatchLock="${dir_Lock}/dispatch.lck"

## Layout Option
## =============
typeset      int_MaxShown="${SHOWMAX:-30}"
typeset       int_Refresh="${REFRESH:-20}"
typeset          int_Tail="${TAIL:-25}"

## Job states
## ==========
##file_States=${dir_Var}/states
##[[ -r ${file_States} ]] || ( echo "No state file defined: \"${file_States}\"" && exit  )

## Program Log
## ===========
typeset      file_ProgLog="${dir_Log}/${str_ProgramName}.log"

## Authority
## =========
typeset str_Authority=
typeset       b_Power=0
typeset  b_Restricted=0

## Load Functions
## ==============
fn_LoadFunctions()
{
  ## Load Functions from a directory based on a search criteria
  ## $1 Directory
  ## $2 Search string
  ## $3 Display false|true
  ##   Next
  ##   -d    dir
  ##   -pre  pre search
  ##   -post post search
  ##typeset local dir_Directory="$(basename ${1})"
  typeset local dir_Directory="${1}"
  typeset local    str_Search="${2}"
  typeset local     b_Display="${3}"
  typeset local      b_Errors=
  typeset local  str_EachFile=
  ##[[ ${b_Display} ]] || printf "\nLoading %s\n" "${dir_Directory}"
  if [ -d "${dir_Directory}" ] ; then
        SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    arr_Functions=$(find -L "${dir_Directory}" -name "${str_Search}*" | sed 's/ /\\ /g')
    arr_Functions=$(find -L "${dir_Directory}" -name "${str_Search}*")
    for str_EachFile in ${arr_Functions} ; do
      if [ -r "${str_EachFile}" ] ; then
        [[ ${b_NonInteractive} ]] || printf "%15s" "${str_EachFile#${dir_Directory}/*${str_Search}}"

        # Bash the function file for errors before loading it
        bash "${str_EachFile}" && . "${str_EachFile}"
        if [[ $? = 0 ]] ; then
          [[ ${b_NonInteractive} ]] || printf "%10s\n" "OK"
        else
          printf "%10s\n" "ERROR" && b_Errors=1
        fi

      else
        echo "Cannot access <${str_EachFile}>"
      fi
    done
    IFS=$SAVEIFS
  else
    :
        ##echo "$(pwd) ${dir_Directory} could not be found"
  fi

  [[ "${b_Errors}" -eq 1 ]] && echo "Check function files for errors like missing quotes, brackets or malformed syntax" && exit 1
}
readonly -f fn_LoadFunctions

fn_CheckLicense()
{
  # Simulate license check
  b_Licence=1
  return 1
}

typeset b_Dispatcher=
typeset b_New=
typeset b_Start=
typeset b_Background=
typeset b_Install=
typeset b_InstallForce=
typeset file_Template=
typeset str_Action=
typeset lst_GetVar=
typeset b_NonInteractive=
typeset b_Sync=

[[ ${BASH_VERSION%%.*} -lt 4 ]] && printf "$str_ProgramName uses associative arrays which require bash 4. Your version: $BASH_VERSION\n" && exit 1

# Checks for python
 ${dir_Python}/showJobs.py -n 1 new > /dev/null 2>&1 && str_ShowJobs=python || str_ShowJobs=bash

## Check for argument list
## scorch can be run in several modes (install, new, file, dispatcher, manager and background)
if [ $# -ne 0 ] ; then
  while [ $# -gt 0 ] ; do
    case "$1" in

      -h | --help    ) fn_Help ; exit 0 ;; #b_Help=1 ;;
      -v | --version ) echo "${str_ProgramName}[${str_ProgramVersion}]" ; exit 0 ;;

      ## API Mode
      -a | --action  ) shift ; file_Template=$(mktemp) ; str_Action=$1 ; b_NonInteractive=1 ;;
      -o | --option  ) shift ; [[ ! $lst_GetVar ]] && lst_GetVar=$1 || lst_GetVar="${lst_GetVar};$1" ; b_NonInteractive=1 ;;
      -s | --start   ) b_Start=1 ;;
      -sync | --sync ) b_Sync=1 ;;
      -dispatcher    ) b_Dispatcher=1 ;;

      ## Internal Mode
      -f | --file    ) shift ; file_Template="$1" ; b_NonInteractive=1 ;;
      -new           ) b_New=1 ;;
      -background    ) b_Background=1 ;;

      ## Development / Alternative Mode
      -p             ) shift ; dir_Plugins="$(fn_BaseDir "${1}")"   ;;
      -j             ) shift ; dir_Job="$(fn_BaseDir "${1}")" ; fn_ResetJobDefinitions ;;

      ## Install Mode
      -install       ) b_Install=1 ;;
      -repair        ) b_InstallForce=1 ;;

      ## Not yet working          -f          ) shift ; dir_Functions="$(fn_BaseDir ${1})"  ;;
    esac
    shift
  done
fi

#HEADER
#RESERVED FOR LOADING OPENSCROCH - DO NOT REMOVE
fn_LoadFunctions "${dir_Functions}" "Scorch_" ${b_New}
## As sson as function is defined, use it to set tmp 
fn_Mkdir ${dir_Memory}

echo $(fn_CheckLicense) && ENTERPRISE=1
if [[ ! -z $ENTERPRISE ]] ; then
  fn_LoadFunctions "${dir_Functions}" "ScorchE_"
  str_License="Enterprise"
else
  printf "\n\n Open Source License. Check out www.autoscorch.com for enterprise license details.\n\n Please wait..."
  sleep 2
  str_License="OpenScorch"
fi

# Area reserved for loading OPENSCORCH - Do not remove
#FOOTER
fn_CheckSetUp
fn_SetPrefs
fn_CheckAuth
fn_CheckDispatcher

[[ ${b_Dispatcher} ]] && fn_Dispatcher
if [[ ${str_Action} ]] ; then
  fn_CreateFile "${file_Template}" blank
  echo "Action:${str_Action}" > "${file_Template}"
  echo "${lst_GetVar}" | tr ";" "\n" >> "${file_Template}"
  cat "${file_Template}"
  fn_CheckDispatcher
  fn_RunJobs
fi

if [[ ${file_Template} ]] ; then
  [[ ! -r "${file_Template}" ]] &&  echo "Error: Cannot read template file ${file_Request}" && exit 1
  fn_NewJob "${file_Template}"
  if [[ ${b_Sync} ]] ; then
    b_Debug=1
    sleep 1

    while : ; do
      str_JobState=$(fn_JobState $(basename ${file_Job}))
      case $str_JobState in
        new       ) echo "You must use -s (--start) to start sync jobs" ; exit 1 ;;
        
        queued    ) echo "Checking dispatcher" ; fn_CheckDispatcher     ; fn_RunJobs ;;
        starting  ) echo "Running Own Jobs"                             ; fn_RunJobs ;;
        pending | running ) : ;;
        
        failed    ) echo "$(basename ${file_Job}) FAILED"               ; exit 1 ;;
        manual    ) echo "$(basename ${file_Job}) MANUAL STEP"          ; exit 99 ;;
        completed ) echo "$(basename ${file_Job}) Completed"            ; exit 0 ;;
        *         ) echo "What is ${str_JobState}"                      ; exit 1 ;;
      esac
      sleep 10
    done

echo "Now find the jobs final resting place - completed or failed or lost"
find -L ${dir_Completed} -name $(basename ${file_Job}) && echo "SUCCESS" && exit 0
find -L ${dir_Failed} -name $(basename ${file_Job}) && echo "FAILED" && exit 1

echo "waiting for ${str_JobName} to complete"
set | grep SAFE
echo call scorch in background and exit clean

set | grep JobFile
exit 0

  else
    exit 0
  fi
fi

if [[ ! -f ${file_CSV} ]] ; then
  fn_CreateFile "${file_CSV}"
  echo "#DEF requesttime responsetime starttime endtime job time tasks failure who" >> "${file_CSV}"
  echo "#FS=," >> "${file_CSV}"
fi

[[ ${b_SetUp} ]] && printf "\nThis may be the first time you have run this. Check the issues above and try again." && mkdir "${dir_Tmp}" &&  exit 1

if [[ "${b_Background}" ]] ; then
  # ADD LOOP HERE FOR JOB CHECKS
  typeset local b_Finished=1
  echo "$(${fn_LogDate}) ${str_User} Running in background to complete queued jobs"
  while [[ "$(find ${dir_Starting} ${dir_Pending} ${dir_Queued} -type l -exec grep -l "str_Owner=${str_User}" {} \;)" ]] ; do
    fn_RunJobs
    sleep 60
  done
  fn_RunJobs # one more try just to mop up
else
  fn_SetLayout
  [ "${b_New}" ]  && fn_NewJob && exit 0
  fn_Manager
  fn_CheckOwnJobs
fi
fn_HouseKeeping

tput sgr0 2 >/dev/null
exit 0